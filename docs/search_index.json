[["index.html", "COMP/STAT 112: Introduction to Data Science Welcome!", " COMP/STAT 112: Introduction to Data Science Welcome! Note: This site is still in construction! This is the day-to-day course site for Introduction to Data Science (COMP/STAT 112) taught by Professor James Normington at Macalester College for Spring 2023. This website was constructed by Professor Brianna Heggeseth, and has been modified for Professor Normington’s Spring 2023 offering of COMP/STAT 112. The activities here were developed by a variety of faculty in the MSCS Department at Macalester College. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["course-schedule.html", "Course Schedule", " Course Schedule The schedule below is a tentative outline of our plans for the semester. This schedule will change throughout the semester, so check this often. Here is a link to the syllabus. Here is a link to the grading template we will use. Week 1 Date Activity Topic & Assignments Optional Readings/Videos 1/19 1 Intro to R, RStudio, and R Markdown Slides for Today Assignment 1 Due Wednesday, January 25th at 11:59pm Readings: Introduction to R Markdown, by Wickham and Grolemund Tidy Data, by Wickham Tidy Data (12.1, 12.2), by Wickham and Grolemund Quarto, a VERY new alternative to R Markdown Videos: Setting up for success in the course, by Lisa Lendway Introduction to RStudio, by Alicia Johnson Check version of R and RStudio, by Lisa Lendway RStudio tour, by Lisa Lendway R Markdown introduction, by Lisa Lendway Week 2 Date Activity Topic & Assignments Optional Readings/Videos 1/24 Community Building Scavenger Hunt Slides for Today 1/26 2 Introduction to Data Visualization Set up NY Times Subscription (Free to you through Macalester) Tidy Tuesdays Slides for Today Assignment 2 Due Wednesday, Feburary 1 at 11:59pm Readings: Data visualization, by Wickham and Grolemund Layered grammar of graphics, by Wickham and Grolemund A grammar for graphics (Chp 3), by Baumer, Kaplan, and Horton Aesthetic mapping (Chp 2), by Wilke Visualizing distributions (Chp 7), by Wilke Videos: Intro to ggplot , by Lisa Lendway Finish Assignment 2 (due 2/1 @ 11:59pm). Week 3 Date Activity Topic & Assignments Optional Readings/Videos 1/31 3 Effective Viz Slides for Today Readings: Equity Awareness for Data Visualizations, by Urban Institute Telling a story (Chp 29), by Wilke 2/2 4 Bivariate Viz Slides for Today Assignment 3 Due Wednesday, Feb 8 at 11:59pm Readings: Visualizing amounts (Chp 6), by Wilke Videos: ggplot demo, Lisa Lendway Common ggplot mistakes, Lisa Lendway Finish Assignment 3 (due 2/8 @ 11:59pm) Week 4 Date Activity Topic & Assignments Optional Readings/Videos 2/7 *MEET IN IDEA LAB (2ND FLOOR LIBRARY)* 5 Multivariate Viz Slides for Today Idea Lab Activity Readings: Visualize This (Chp 7), by Yau Videos: More ggplot, Lisa Lendway 2/9 6 Spatial Viz Slides for Today Assignment 4 Due Wednesday, February 15 at 11:59pm Readings: Visualize This (Chp 8), by Yau Spatial data visualization (Chp 17, intro and 17.1), by Baumer et al. Videos: Plotting data on a map with ggmap, Lisa Lendway Glamour of graphics, Will Chase (slides here) Week 5 Date Activity Topic & Assignments Optional Readings/Videos 2/14 7 Six Main Verbs Slides for Today Assignment 5 Due Friday, February 24 at 11:59pm Readings: Data transformation, by Wickham and Grolemund Data wrangling on one table, by Baumer, Kaplan, and Horton Videos: Intro to dplyr, Lisa Lendway Demonstration of dplyr, Lisa Lendway 2/16 8 Reshaping Data Slides for Today Readings: Pivoting and narrow v. wide formats, by Wickham and Grolemund Reshaping data, by Baumer, Kaplan, and Horton Videos: Demonstration of pivoting, Lisa Lendway Finish Assignment 5 due Fri Feb 24 @ 11:59pm Week 6 Date Activity Topic & Assignments Optional Readings/Videos 2/21 9 Joining Slides for Today Assignment 6 Due Friday, March 3 at 11:59pm Readings: Relational data, by Wickham and Grolemund Data wrangling on multiple table, by Baumer, Kaplan, and Horton Videos: Demonstration of joining data, Lisa Lendway 2/23 Class canceled due to inclement weather Finish Assignment 6 (due 3/3 @ 11:59pm) Week 7 Date Activity Topic & Assignments Optional Readings/Videos 2/28 10 Factors Slides for Today Assignment 6 Due Friday, March 3 at 11:59pm Readings: Factors, by Wickham and Grolemund Videos: Working with factors using forcats, Lisa Lendway 3/2 No class due to MSCS Capstone Days! Attend at least two capstone talks and write a short blurb (more info to come) Finish Assignment 6 (due 3/3 @ 11:59pm) "],["intro-to-r-rstudio-and-r-markdown.html", "Topic 1 Intro to R, RStudio, and R Markdown Learning Goals Getting Started in RStudio R Markdown and Reproducible Research Assignment 1 (due Wednesday, January 25 @ 11:59pm) Appendix: R Functions", " Topic 1 Intro to R, RStudio, and R Markdown Learning Goals Download and install the necessary tools (R, RStudio) Develop comfort in navigating the tools in RStudio Develop comfort in writing and knitting a R Markdown file Identify the characteristics of tidy data Use R code: as a calculator and to explore tidy data Getting Started in RStudio As you might guess from the name, “Data Science” requires data. Working with modern (large, messy) data sets requires statistical software. We’ll exclusively use RStudio. Why? it’s free it’s open source (the code is free &amp; anybody can contribute to it) it has a huge online community (which is helpful for when you get stuck) it’s one of the industry standards it can be used to create reproducible and lovely documents (In fact, the course materials that you’re currently reading were constructed entirely within RStudio! [thank you Prof. Brianna Heggeseth!]) Download R &amp; RStudio To get started, take the following two steps in the given order. Even if you already have R/RStudio, make sure to update to the most recent versions. Download and install the R statistical software at https://mirror.las.iastate.edu/CRAN/ Download and install the FREE version of RStudio at https://www.rstudio.com/products/rstudio/download/#download If you are having issues with downloading, log on to https://rstudio.macalester.edu/ (use Mac credentials) to use the RStudio server. What’s the difference between R and RStudio? RStudio requires R to run, but has more options and is easier to use than R. I like to think of RStudio as the car, and R as the engine. A quick tour of RStudio Open RStudio! You should see four panes, each serving a different purpose: Figure 1.1: RStudio Interface This short video tour of RStudio summarizes some basic features of the console. Exercise 1.1 (Warm Up) Use RStudio as a simple calculator to do the following: Perform a simple calculation: calculate 90/3. RStudio has built-in functions to which we supply the necessary arguments: function(arguments). Use the built-in function sqrt to calculate the square root of 25. Use the built-in function rep to repeat the number “5” eight times. Use the seq function to create the vector (0, 3, 6, 9, 12). Hint: seq(0, 15, by = 5) would create the vector (0, 5, 10, 15). Create a new vector by concatenating three repetitions of the vector from the previous part. Solution 90/3 ## [1] 30 sqrt(25) ## [1] 5 rep(5, times = 8) ## [1] 5 5 5 5 5 5 5 5 seq(0, 12, by = 3) ## [1] 0 3 6 9 12 rep(seq(0, 12, by = 3), times = 3) ## [1] 0 3 6 9 12 0 3 6 9 12 0 3 6 9 12 rep(seq(0, 12, by = 3), each = 3) #notice the difference between times and each ## [1] 0 0 0 3 3 3 6 6 6 9 9 9 12 12 12 Exercise 1.2 (Assignment) We often want to store our output for later use (why?). The basic idea in RStudio: `name &lt;- output` Copy and paste the following code into the console, line by line. NOTE: RStudio ignores any content after the #. Thus we use this to ‘comment’ and organize our code. #type square_3 square_3 #calculate 3 squared 3^2 #store this as &quot;square_3&quot; square_3 &lt;- 3^2 #type square_3 again! square_3 #do some math with square_3 square_3 + 2 Data Not only does “Data Science” require statistical software, it requires DATA! Consider the Google definition: Figure 1.2: A datum. With this definition in mind, which of the following are examples of data? tables ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 2 1 78.5 67.0 F 69.2 4 ## 3 1 78.5 67.0 F 69.0 4 ## 4 1 78.5 67.0 F 69.0 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 photo video text / tweets We’ll mostly work with data that look like this: ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 2 1 78.5 67.0 F 69.2 4 ## 3 1 78.5 67.0 F 69.0 4 ## 4 1 78.5 67.0 F 69.0 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 This isn’t as restrictive as it seems. We can convert the above signals: photos, videos, and text to a data table format! Tidy Data Example: After a scandal among FIFA officials, fivethirtyeight.com posted an analysis of FIFA viewership, “How to Break FIFA”. Here’s a snapshot of the data used in this article: country confederation population_share tv_audience_share gdp_weighted_share United States CONCACAF 4.5 4.3 11.3 Japan AFC 1.9 4.9 9.1 China AFC 19.5 14.8 7.3 Germany UEFA 1.2 2.9 6.3 Brazil CONMEBOL 2.8 7.1 5.4 United Kingdom UEFA 0.9 2.1 4.2 Italy UEFA 0.9 2.1 4.0 France UEFA 0.9 2.0 4.0 Russia UEFA 2.1 3.1 3.5 Spain UEFA 0.7 1.8 3.1 The data table above is in tidy format. Tidy data tables have three key features: Each row represents a unit of observation (also referred to as a case). Each column represents a variable (ie. an attribute of the cases that can vary from case to case). Each variable is one of two types: quantitative = numerical categorical = discrete possibilities/categories Each entry contains a single data value; no analysis, summaries, footnotes, comments, etc., and only one value per cell Tidy Data: Art by Allison Horst Exercise 1.3 (Units of Observation and Variables) Consider the following in a group: What are the units of observation in the FIFA data? What are the variables? Which are quantitative? Which are categorical? Are these tidy data? Solution A FIFA member country country name, soccer or football confederation, country’s share of global population (percentage), country’s share of global world cup TV Audience (percentage), country’s GDP-weighted audience share (percentage) Yes Exercise 1.4 (Tidy vs. Untidy) Check out the following data. Explain to each other why they are untidy and how we can tidy them. Data 1: FIFA country confederation population share tv_share United States CONCACAF i don’t know* 4.3% *look up later Japan AFC 1.9 4.9% China AFC 19.5 14.8% total=24% Data 2: Gapminder life expectancies by country country 1952 1957 1962 Asia Afghanistan 28.8 30.3 32.0 Bahrain 50.9 53.8 56.9 Africa Algeria 43.0 45.7 48.3 Solution There are notes such as “I don’t know” and “look up later” in columns with numeric values; the last row with the total is a summary. We could remove the text notes, replace it with the value if known, and remove the last row with the total summary. The first column does not have a row name. It should be continent. Additionally, Bahrain needs a value for the continent. Data Basics in RStudio For now, we’ll focus on tidy data. In a couple of weeks, you’ll learn how to turn untidy data into tidy data. Exercise 1.5 (Importing Package Data) The first step to working with data in RStudio is getting it in there! How we do this depends on its format (eg: Excel spreadsheet, csv file, txt file) and storage locations (eg: online, within Wiki, desktop). Luckily for us, the fifa_audience data are stored in the fivethirtyeight RStudio package. Copy and paste the following code into the Console and press Enter. #download the data and information in the fivethirtyeight package (we only need to do this once) install.packages(&#39;fivethirtyeight&#39;) #load the fivethirtyeight package (we must do this every session of RStudio in which we want to use this package) library(fivethirtyeight) #load the fifa data data(&quot;fifa_audience&quot;) #store this under a shorter, easier name fifa &lt;- fifa_audience Exercise 1.6 (Examining Data Structures) Before we can analyze our data, we must understand its structure. Try out the following functions (copy and paste into the Console). For each, make a note that describes its action. #(what does View do?) View(fifa) #(what does head do?) head(fifa) #(what does dim do?) dim(fifa) #(what does names do?) names(fifa) Solution #View() opens up a new tab with a spreadsheet preview of the data to visually explore the data. It is commented out in the Rmarkdown file because this is an interactive feature #View(fifa) #head() gives the first 6 (default number) rows of a data set head(fifa) ## # A tibble: 6 × 5 ## country confederation population_share tv_audience_share gdp_weighted…¹ ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 United States CONCACAF 4.5 4.3 11.3 ## 2 Japan AFC 1.9 4.9 9.1 ## 3 China AFC 19.5 14.8 7.3 ## 4 Germany UEFA 1.2 2.9 6.3 ## 5 Brazil CONMEBOL 2.8 7.1 5.4 ## 6 United Kingdom UEFA 0.9 2.1 4.2 ## # … with abbreviated variable name ¹​gdp_weighted_share #dim() gives the number of rows and number of columns dim(fifa) ## [1] 191 5 #names() gives the names of the columns/variables names(fifa) ## [1] &quot;country&quot; &quot;confederation&quot; &quot;population_share&quot; ## [4] &quot;tv_audience_share&quot; &quot;gdp_weighted_share&quot; Exercise 1.7 (Codebooks) Data are also only useful if we know what they measure! The fifa data table is tidy; it doesn’t have any helpful notes in the data itself. Rather, information about the data is stored in a separate codebook. Codebooks can be stored in many ways (eg: Google docs, word docs, etc). Here the authors have made their codebook available in RStudio (under the original fifa_audience name). Check it out (run the following code in the console): ?fifa_audience What does population_share measure? What are the units of population_share? Solution Country’s share of global population Percentage between 0 and 100   Exercise 1.8 (Examining a Single Variable) Consider the following: We might want to access and focus on a single variable. To this end, we can use the $ notation (see below). What are the values of tv_audience_share? Of confederation? Is it easy to figure out? fifa$tv_audience_share fifa$confederation It’s important to understand the format/class of each variable (quantitative, categorical, date, etc) in both its meaning and its structure within RStudio: class(fifa$tv_audience_share) class(fifa$confederation) If a variable is categorical (in factor format), we can determine its levels / category labels. What are the value of confederation? levels(fifa$confederation) #it is in character format levels(factor(fifa$confederation)) #we can convert to factor format R Markdown and Reproducible Research Reproducible research is the idea that data analyses, and more generally, scientific claims, are published with their data and software code so that others may verify the findings and build upon them. - Reproducible Research, Coursera Useful Resources: R Markdown Quick Tour R Markdown Cheatsheet R Markdown Reference Guide Research often makes claims that are difficult to verify. A recent study of published psychology articles found that less than half of published claims could be reproduced. One of the most common reasons claims cannot be reproduced is confusion about data analysis. It may be unclear exactly how data was prepared and analyzed, or there may be a mistake in the analysis. In this course we will use an innovative format called R Markdown that dramatically increases the transparency of data analysis. R Markdown interleaves data, R code, graphs, tables, and text, packaging them into an easily publishable format. To use R Markdown, you will write an R Markdown formatted file in RStudio and then ask RStudio to knit it into an HTML document (or occasionally a PDF or MS Word document). Exercise 1.9 (Deduce the R Markdown Format) Look at this Sample RMarkdown and the HTML webpage it creates. Consider the following and discuss: How are bullets, italics, and section headers represented in the R Markdown file? How does R code appear in the R Markdown file? In the HTML webpage, do you see the R code, the output of the R code, or both? Solution Bullets are represented with * and + Italics are represented with * before and after a word or phrase Section headers are represented with # R code chunks are between 3 tick marks at the beginning and end; it is R code if there is an r in curly braces If echo=FALSE in curly braces, the code is not shown. Otherwise, both code and output are shown by default.   Now take a look at the R Markdown cheatsheet. Look up the R Markdown features from the previous question on the cheatsheet. There’s a great deal more information there. Assignment 1 (due Wednesday, January 25 @ 11:59pm) Complete the following. If you get stuck along the way, refer to the R Markdown cheatsheet linked above, search the web for answers, and/or ask for help! Exercise 1.10 (Your First R Markdown File) Create a new R Markdown about your favorite food. Create a new folder on your Desktop called COMP_STAT_112. Within that folder, create a subfolder called Day_01. Create a new file in RStudio (File -&gt; New File -&gt; R Markdown) with a Title of First_Markdown. Save it in the Day 01 subfolder. Make sure you can compile/render (Knit) the Markdown into a webpage (html file). Add a new line between title and output that reads: author: Your Name. Create a very brief essay about your favorite food. Make sure to include: A picture from the web: (1) Download an image and save it in the same folder as your Markdown (.Rmd) file. Then, add the following code to your Markdown file: ![This is the caption](file_name.png). For example, to add a photo of an elephant saved as elephant.png, you would put: ![This is an elephant](elephant.png) A bullet list A numbered list Compile (Knit) the document into an html file. Exercise 1.11 (New Data!) There’s a data set named comic_characters in the fivethirtyeightdata package. Install the package by running the following in the Console: install.packages(&#39;fivethirtyeightdata&#39;, repos = &#39;https://fivethirtyeightdata.github.io/drat/&#39;, type = &#39;source&#39;) Check out the codebook (hint: use ?) to understand what these data measure. Then add a second section to your R Markdown file, and then use code chunks and R commands to perform/answer the following tasks/questions: Load the data. What are the units of observation? How many observations are there? In a new code chunk, print out the first 12 rows of the data set. Get a list of all variable names. What’s the class of the date variable? List all of the unique entries in the gsm variable (no need to include NA). Compile the document into an html file. Appendix: R Functions R as a calculator Function/Operator Action Example / Division 90/30 * Multiplication 2*5 + Addition 1+1 - Subtraction 1-1 ^ Exponent/Power to 3^2 sqrt(x) Square root sqrt(25) R Basics Function/Operator Action Example install.packages('packagename') Download a R package (function, data, etc.) from repository install.packages('fivethirtyeight') library(packagename) Access a downloaded R package library(fivethirtyeight) ?function_object_name Opens the help/documentation for the function or object ?seq rep(x, times, each) Repeat x a # times rep(5,8) seq(from,to,by) Sequence generation 2*5 name &lt;- value_output Assign value or output to a name squared_3 &lt;- 3^2 View(x) Open spreadsheet viewer of dataset View(fifa_audience) head(x) Print the first 6 rows of a dataset head(fifa_audience) dim(x) Print the dimensions (number of rows and columns) of a dataset dim(fifa_audience) names(x) Print the names of the variables in a dataset names(fifa_audience) $ Used to access one variable in a data set based on its name fifa_audience$confederation class(x) Print the class types argument or input class(fifa_audience$confederation) factor(x) Converts the argument or input to a factor class type (categorical variable) factor(fifa_audience$confederation) levels(x) Prints the unique categories of a factor levels(factor(fifa_audience$confederation)) "],["intro-to-data-visualization.html", "Topic 2 Intro to Data Visualization Learning Goals Benefits of Visualizations Glyphs Data Visualization Workflow + ggplot Assignment 2 (due Wednesday, Feb 1 at 11:59pm) Appendix: R Functions", " Topic 2 Intro to Data Visualization Learning Goals Understand the Grammar of Graphics Use ggplot2 to create basic layers of graphics Understand the different basic univariate visualizations for categorical and quantitative variables You can download a template .Rmd of this activity here. Put this in a new folder called Day_02 in your folder for COMP_STAT_112. Benefits of Visualizations Visualizations help us understand what we’re working with: What are the scales of our variables? Are there any outliers, i.e. unusual cases? What are the patterns among our variables? This understanding will inform our next steps: What method of analysis / model is appropriate? Once our analysis is complete, visualizations are a powerful way to communicate our findings and tell a story. Glyphs In its original sense, in archaeology, a glyph is a carved symbol. Heiroglyph Mayan glyph Data Glyph A data glyph is also a mark, e.g. The features of a data glyph encodes the value of variables. Some are very simple, e.g. a dot: Some combine different elements, e.g. a pointrange: Some are complicated, e.g. a dotplot: Components of Graphics Figure 2.1: Blood pressure readings from a random subset of the NHANES data set. frame: The position scale describing how data are mapped to x and y glyph: The basic graphical unit that represents one case. other terms used include mark and symbol. aesthetic: a visual property of a glyph such as position, size, shape, color, etc. may be mapped based on data values: smoker -&gt; color may be set to particular non-data related values: color is black facet: a subplot that shows one subset of the data rather than represent sex by shape, we could split into two subplots scale: A mapping that translates data values into aesthetics. example: never-&gt; pink; former-&gt; aqua; current-&gt; green guide: An indication for the human viewer of the scale. This allows the viewer to translate aesthetics back into data values. examples: x- and y-axes, various sorts of legends Eye Training for the Layered Grammar of Graphics Exercise 2.1 (Basic questions to ask of a data graphic) For your assigned graphic, discuss the following seven questions with your partner(s): What variables constitute the frame? What glyphs are used? What are the aesthetics for those glyphs? Which variable is mapped to each aesthetic? Which variable, if any, is used for faceting? Which scales are displayed with a guide? What raw data would be required for this plot, and what form should it be in? Here are the graphics examples, all taken from the New York Times website: Admissions gap Medicare hospital charges Football conferences Housing prices Baseball pitching Phillips curve School mathematics ratings Corporate taxes Glyph-Ready Data Note the mapping of data to aesthetics for Figure 2.1: sbp [Systolic Blood Pressure] -&gt; x dbp [Diastolic Blood Pressure] -&gt; y smoker -&gt; color sex -&gt; shape Glyph-ready data has this form: There is one row for each glyph to be drawn. The variables in that row are mapped to aesthetics of the glyph (including position). Table 2.1: A subset of the NHANES data set. sbp dbp sex smoker 112 55 male former 144 84 male never 143 84 female never 110 62 female never 121 72 female never 129 60 female never Data Visualization Workflow + ggplot Layers – Building up Complex Plots Using the ggplot2 package, we can create graphics by building up layers, each of which may have its own data, glyphs, aesthetic mapping, etc. As an example, let’s peel back the layers used to create Figure 2.1. The first layer just identifies the data set. It sets up a blank canvas, but does not actually plot anything: ggplot(data = Tmp) Next, we add a geometry layer to identify the mapping of data to aesthetics for each of the glyphs: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) Next, we can add some axes labels as guides: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) + xlab(&quot;Systolic BP&quot;) + ylab(&quot;Diastolic BP&quot;) And, finally, we can change the scale of the color used for smoker status: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) + xlab(&quot;Systolic BP&quot;) + ylab(&quot;Diastolic BP&quot;) + scale_color_manual(values = c(&quot;#F8766D&quot;, &quot;#00BFC4&quot;, &quot;#00BA38&quot;)) If instead we wanted to facet into columns based on smoker status, we could add another layer for that: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) + xlab(&quot;Systolic BP&quot;) + ylab(&quot;Diastolic BP&quot;) + scale_color_manual(values = c(&quot;#F8766D&quot;, &quot;#00BFC4&quot;, &quot;#00BA38&quot;)) + facet_grid(. ~ smoker) For more information on all of the different types of layers we can add to graphics, see the ggplot2 reference page and the data visualization with ggplot2 cheat sheet. Getting Started There’s no end to the number and type of visualizations you could make. Thus the process can feel overwhelming. FlowingData makes good recommendations for data viz workflow: Ask the data questions. Simple research questions will guide the types of visualizations that you should construct. Start with the basics and work incrementally. Before constructing complicated or multivariate or interactive graphics, start with simple visualizations. An understanding of the simple patterns provides a foundation upon which to build more advanced analyses and visualizations. This incremental process works particularly well with the layered grammar of graphics in ggplot. Focus. Reporting a large number of visualizations can overwhelm the audience and obscure your conclusions. Instead, pick out a focused yet comprehensive set of visualizations. Here is an example of one dataset visualized 25 different ways, each with a different focus and interpretation, and what can happen if you let the data ramble on without a focus. In this course we’ll largely construct visualizations using the ggplot function in RStudio. Though the ggplot learning curve can be steep, its “grammar” is intuitive and generalizable once mastered. The ggplot plotting function is stored in the ggplot2 package: library(ggplot2) The best way to learn about ggplot is to just play around. Focus on the patterns and potential of their application. It will be helpful to have the RStudio Data Visualization cheat sheet handy as you complete this activity. An Example The “Bechdel test”, named after cartoonist Alison Bechdel, tests whether movies meet the following criteria: There are \\(\\ge\\) 2 (named) female characters; these women talk to each other… about something other than a man. In the fivethirtyeight.com article “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women”, the authors analyze which Hollywood movies do/don’t pass the test. Their data are available in the fivethirtyeight package: library(fivethirtyeight) data(bechdel) head(bechdel) year imdb title clean_test binary budget_2013 domgross_2013 intgross_2013 2013 tt1711425 21 &amp; Over notalk FAIL 13000000 25682380 42195766 2012 tt1343727 Dredd 3D ok PASS 45658735 13611086 41467257 2013 tt2024544 12 Years a Slave notalk FAIL 20000000 53107035 158607035 2013 tt1272878 2 Guns notalk FAIL 61000000 75612460 132493015 2013 tt0453562 42 men FAIL 40000000 95020213 95020213 2013 tt1335975 47 Ronin men FAIL 225000000 38362475 145803842 Exercise 2.2 Before diving into any visualizations of these data, we first must understand its structure and contents. Discuss the following: What are the units of observation and how many units are in this sample? What are the levels of the clean_test and binary categorical variables? Check out the codebook for bechdel (?bechdel). What’s the difference between domgross_2013 and domgross? Solution #units of observation are movies; there are 1794 movies in this sample dim(bechdel) ## [1] 1794 15 #clean_test has values of &quot;nowomen&quot;, &quot;notalk&quot;, &quot;men&quot;, &quot;dubious&quot;, &quot;ok&quot; #View(bchedel) and look at values or summarize like below table(bechdel$clean_test) ## ## nowomen notalk men dubious ok ## 141 514 194 142 803 levels(bechdel$clean_test) ## [1] &quot;nowomen&quot; &quot;notalk&quot; &quot;men&quot; &quot;dubious&quot; &quot;ok&quot; #binary has values of PASS or FAIL table(bechdel$binary) ## ## FAIL PASS ## 991 803 levels(factor(bechdel$binary)) ## [1] &quot;FAIL&quot; &quot;PASS&quot; # domgross_2013 is the domestic gross in US dollars but it is inflation adjusted with respect to 2013 #?bechdel Exercise 2.3 We’ll consider univariate visualizations of the clean_test and budget_2013 variables. Discuss the following: What features would we like a visualization of the categorical clean_test variable to capture? What features would we like a visualization of the quantitative budget_2013 variable to capture? Solution capture the frequency of each way a movie can fail or pass the Bechdel test capture the typical budget as well as how much variation there is across movies and if there are any outliers Categorical univariate visualization We begin by stating a clear research question: Among the movies in our sample, what fraction pass the Bechdel test? Among those that fail the test, in which way do they fail (e.g., there are no women, there are women but they only talk about men,…)? To answer the above research question, we can explore the categorical clean_test variable. A table provides a simple summary of the number of movies that fall into each clean_test category: table(bechdel$clean_test) ## ## nowomen notalk men dubious ok ## 141 514 194 142 803 Exercise 2.4 Examine the table of clean_test data, and try to interpret it. What insights does it provide about the original research question? Solution Among the categories, the “ok” category was most frequent, meaning that 803 of the 1794 movies in the sample passed the Bechdel Test. However, among those 991 movies that did not pass the test, most of them (514 of them) did not pass because the women did not talk. Because clean_test is a categorical variable, a bar chart provides an appropriate visualization of this table. In examining the bar chart, keep your eyes on the following. variability: Are cases evenly spread out among the categories or are some categories more common than others? contextual implications: In the context of your research, what do you learn from the bar chart? How would you describe your findings to a broad audience? Exercise 2.5 Try out the code below that builds up from a simple to a customized bar chart. At each step determine how each piece of code contributes to the plot. # plot 1: set up a plotting frame (a blank canvas) ggplot(bechdel, aes(x = clean_test)) # plot 2: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar() # plot 3: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar() + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 4: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar(color = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 5: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar(fill = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) Solution # plot 1: set up a plotting frame (a blank canvas) ggplot(bechdel, aes(x = clean_test)) # plot 2: Added bars that reflect the count or frequency of the movies within each category ggplot(bechdel, aes(x = clean_test)) + geom_bar() # plot 3: Added/changed the text labels for the x and y axes ggplot(bechdel, aes(x = clean_test)) + geom_bar() + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 4: Changed the outline color of the bars to purple ggplot(bechdel, aes(x = clean_test)) + geom_bar(color = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 5: Changed the fill color of the bars to purple ggplot(bechdel, aes(x = clean_test)) + geom_bar(fill = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) Exercise 2.6 Summarize the visualization: what did you learn about the distribution of the clean_test variable? Solution Among the categories, the “ok” category was most frequent. However, among those movies that did not pass the test, most of them did not pass because the women in the movie did not talk. Exercise 2.7 Let’s return to our research question: What percent of movies in the sample pass the Bechdel test? Among those that fail the test, in which way do they fail? Solution table(bechdel$binary) ## ## FAIL PASS ## 991 803 803/(991 + 803) ## [1] 0.4476031 table(bechdel$clean_test)[1:4]/991 ## ## nowomen notalk men dubious ## 0.1422805 0.5186680 0.1957619 0.1432896 Quantitative univariate visualization To motivate quantitative visualizations, consider a second research question Among the movies in our sample, what’s the range of budgets? What’s the typical budget? The largest/smallest? We can answer the above research question by exploring the quantitative budget_2013 variable. Quantitative variables require different summary tools than categorical variables. We’ll explore two methods for graphing quantitative variables: histograms and density plots. Both of these has strengths/weaknesses in helping us visualize the distribution of observed values. In their examination, keep your eyes on the following. center: Where’s the center of the distribution? What’s a typical value of the variable? variability: How spread out are the values? A lot or a little? shape: How are values distributed along the observed range? Is the distribution symmetric, right-skewed, left-skewed, bi-modal, or uniform (flat)? outliers: Are there any outliers, ie. values that are unusually large/small relative to the bulk of other values? contextual implications: Interpret these features in the context of your research. How would you describe your findings to a broad audience? Histograms Histograms are constructed by (1) dividing up the observed range of the variable into ‘bins’ of equal width; and (2) counting up the number of cases that fall into each bin. Exercise 2.8 Try out the code below. At each step determine how each piece of code contributes to the plot. # plot 1: set up a plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() # plot 3: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 4: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 5: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(fill = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 6: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 500000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 7: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 200000000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) Solution # plot 1: set up a plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: Added bars the represent the count of movies within budget intervals ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() # plot 3: Updated the text on the x and y axis labels ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 4: The outline of the bars is now white ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 5: The fill of the bars is now white ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(fill = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 6: The width of the interval or bin is decreased to $500,000 ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 500000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 7: The width of the interval or bin is increased to $200,000,000 ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 200000000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) Exercise 2.9 Summarize the visualizations. Describe the problem in choosing a bin width that’s not too wide and not too narrow, but just right. What did you learn about the distribution of the budget_2013 variable? Why does adding color = \"white\" improve the visualization? Solution If the intervals (bars, bins) are too wide, then we lose information about the variation in the budget. Take it to the extreme with just 1 bar with the bar ranging from the minimum to the maximum. If the intervals are too small, then we have the frequency of the bars go up and down quite a bit. We might say that the shape of the bars isn’t very smooth. Most of the movies have small budgets; the majority less of budgets are less than $100,000,000 (in 2013 dollars) but there are some movies with upwards of $300,000,000 (in 2013 dollars). Adding the white outline to the bars adds contrast and helps the viewer see where each bar starts and ends. Density plots Density plots are essentially smooth versions of the histogram. Instead of sorting cases into discrete bins, the “density” of cases is calculated across the entire range of values. The greater the number of cases, the greater the density! The density is then scaled so that the area under the density curve always equals 1 and the area under any fraction of the curve represents the fraction of cases that lie in that range. Exercise 2.10 Try the following code and assess what each line does. # plot 1: set up the plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density() # plot 3: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density() + labs(x = &quot;Budget ($)&quot;) # plot 4: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density(color = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;) # plot 5: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density(fill = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;) Solution # plot 1: set up the plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: add a smooth curve (shape of the histogram) ggplot(bechdel, aes(x = budget_2013)) + geom_density() # plot 3: updated the x axis label ggplot(bechdel, aes(x = budget_2013)) + geom_density() + labs(x = &quot;Budget ($)&quot;) # plot 4: changed the color of the curve to red ggplot(bechdel, aes(x = budget_2013)) + geom_density(color = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;) # plot 5: filled the area under the curve to be red ggplot(bechdel, aes(x = budget_2013)) + geom_density(fill = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;)   Exercise 2.11 The histogram and density plot both allow us to visualize the distribution of a quantitative variable. What are the pros/cons of each? Discuss. Assignment 2 (due Wednesday, Feb 1 at 11:59pm) Exercise 2.12 In July 2016, fivethirtyeight.com published the article “Hip-Hop is Turning on Donald Trump””. You can find the supporting data table hiphop_cand_lyrics in the fivethirtyeight package: library(fivethirtyeight) data(hiphop_cand_lyrics) What are the cases in this data set? Use RStudio functions to: summarize the number of cases in hiphop_cand_lyrics examine the first cases of hiphop_cand_lyrics list out the names of all variables in hiphop_cand_lyrics Exercise 2.13 Let’s start our investigation of hip hop data by asking “Who?”; that is, let’s identify patterns in which 2016 presidential candidates popped up in hip hop lyrics. Use an RStudio function to determine the category labels used for the candidate variable. Use table to construct a table of the number of cases that fall into each candidate category. Construct a single plot that allows you to investigate the prevalence of each candidate in hip hop. Make the following modifications: - change the axis labels - change the fill colors Summarize your findings about the 2016 candidates in hip hop. Exercise 2.14 Next, consider the release dates of the hip hop songs. Construct a histogram of the release dates with the following modifications: - change the fill color of the bins - change the bin width to a meaningful size Construct a density plot of the release dates with the following modifications: - change the fill color Summarize your findings about release date Exercise 2.15 No class will teach you everything you need to know about RStudio or programming in general. Thus, being able to find help online is an important skill. To this end, make a single visualization that incorporates the following modifications to your density plot from above. This will require a little Googling and/or use of the visualization cheat sheet. Add a title or caption. Add transparency to the fill color. Calculate the mean (ie. average) release date and median release date: mean(hiphop_cand_lyrics$album_release_date) median(hiphop_cand_lyrics$album_release_date) Add two vertical lines to your plot: one representing the mean and the other representing the median. Use two different colors and/or line types. Change the limits of the x-axis to range from 1980-2020. Appendix: R Functions Basic R functions Function/Operator Action Example table(x) Frequency count of categories in x table(bechdel$clean_test) mean(x) Average or mean of numeric values in x mean(bechdel$budget_2013) median(x) Median of numeric values in x median(bechdel$budget_2013) ggplot2 foundation functions Function/Operator Action Example ggplot(data) Create a blank canvas that can create a visualization based on data ggplot(data = bechdel) ggplot(data,aes()) Create a blank canvas that can create a visualization based on data with aesthetic mapping ggplot(data = bechdel, aes(x = budget_2013)) + geom_bar(aes(x)) Add a bar plot geom_bar(aes(x = clean_test)) + geom_point(aes(x,y)) Add a scatterplot geom_bar(aes(x = year,y=budget_2013)) + geom_histogram(aes(x)) Add a histogram geom_histogram(aes(x = budget_2013)) + geom_density(aes(x)) Add a density plot geom_density(aes(x = budget_2013)) more ggplot2 functions Function/Operator Action Example + xlab() Add an label for the x-axis xlab('X axis') + ylab() Add an label for the y-axis ylab('Y axis') + labs(x,y) Add labels for the x and y-axis labs(y = 'Y axis', x = 'X axis') + scale_color_manual() Set a color palette for the color aesthetic scale_color_manual(values = c('blue','red')) + facet_grid() Create subplots based on categorical variables, groupvar_along_yaxis ~ groupvar_along_xaxis + facet_grid(. ~ smoker) ggplot2 aesthetic mapping options Function/Operator Action Example x variable for x-axis aes(x = clean_test) y variable for y-axis aes(y = budget_2013) color variable for colors of points or strokes/outline aes(color = clean_test) fill variable for fill of bars or shapes aes(fill = clean_test) size variable for size shapes aes(size = budget_2013) shape variable for shape type aes(shape = clean_test) "],["effective-visualizations.html", "Topic 3 Effective Visualizations Learning Goals Effective Visualizations Practice", " Topic 3 Effective Visualizations Learning Goals Understand and apply the guiding principles of effective visualizations You can download a template .Rmd of this activity here. Put the file in a Assignment_03 folder within your COMP_STAT_112 folder. Effective Visualizations Benefits of Visualizations Visualizations help us understand what we’re working with: What are the scales of our variables? Are there any outliers, i.e. unusual cases? What are the patterns among our variables? This understanding will inform our next steps: What method of analysis / model is appropriate? Once our analysis is complete, visualizations are a powerful way to communicate our findings and tell a story. Analysis of Graphics There is not one right way to visualize a data set. However, there are guiding principles that distinguish between “good” and “bad” graphics. One of the best ways to learn is by reading graphics and determining which ways of arranging thing are better or worse. So before jumping directly into theoretical principles, let’s try some critical analysis on specific examples. Example 3.1 For your assigned graphics or sets of graphics, identify the following: the story the graphic is aiming to communicate to the audience effective features of the graphic areas for improvement Figure 3.1: Source: http://viz.wtf/ Figure 3.2: Source: N. Yau, Visualize This, 2011, p. 223-225. Figure 3.3: Source: N. Yau, Visualize This, 2011, p. 242. Figure 3.4: Gun deaths. Figure 3.5: Source: N. Yau, Visualize This, 2011, p. 150. Figure 3.6: Source: C. N. Knaflic, Storytelling with Data, 2015, p. 142. Figure 3.7: Source: S. Few, Now You See It, 2009, p. 45. Figure 3.8: Climate change. Figure 3.9: Source: C. N. Knaflic, Storytelling with Data, 2015, p. 48. Figure 3.10: Diamond data visualizations from R for Data Science, 2017 Figure 3.11: Source: S. Few, Now You See It, 2009, p. 37. Figure 3.12: Source: N. Yau, Visualize This, 2011, p. 249. Figure 3.13: Source: S. Few, Now You See It, 2009, p. 61. Figure 3.14: Source: C. N. Knaflic, Storytelling with Data, 2015, p. 68. Figure 3.15: Source: C. N. Knaflic, Storytelling with Data, 2015, p. 81. Figure 3.16: Source: http://viz.wtf/ Figure 3.17: Source: A. Cairo, The Functional Art, 2013, p. 340. Figure 3.18: Source: N. Yau, Visualize This, 2011, p. 220. More examples: FlowingData: blog and Best visualizations of 2016 WTF Visualizations Properties of Effective Visualizations Storytelling / Context Remember … Graphics are designed by the human expert (you!) in order to reveal information that’s in the data. Your choices depend on what information you want to reveal and convey. So before you complete a graphic, you should clearly identify what story you want the graphic to tell to the audience, and double check that this story is being told.1 Here is a nice example from FiveThirtyEight where each chart tells a story in answer to a particular question about the [then] upcoming German election. Here is an interactive visualization that tells a story about gun violence. Another important contextual question to ask is whether the graphic is for an explanatory (explain why) or exploratory (discovering something new) analysis. Accessibility In addition to considering the story you are telling, you need to consider what audiences can access your story. Alternative (Alt) Text: In order for data visualizations to be accessible to people who are blind and use screen readers, we can provide alt text. Alt text should concisely articulate (1) what your visualization is (e.g. a bar chart showing which the harvest rate of cucumbers), (2) a one sentence description of the what you think is the most important takeaway your visualization is showing, and (3) a link to your data source if it’s not already in the caption (check out this great resource on writing alt text for data visualizations). To add the alt text to your the HTML created from knitting the Rmd, you can include it as an option at the top of your r chunk. For example: {r, fig.alt = “Bar chart showing the daily harvest of cucumbers. The peak cucumber collection day is August 18th”}. To see the alt text in the knitted html file, you can hover over the image. Color-blind friendly color palettes: In order for data visualizations to be accessible to people with color blindness, we need to be thoughtful about the colors we use in our data visualizations. The most common variety of color-blindness makes it hard for individuals to detect differences between red and green. Some types make it hard detect differences between blue and yellow. Other types make it hard to see different shades of a color. This Chromatic Vision Simulator can give you a sense of how this could impact your perception of colors (see image below). You could also upload a visualization to this simulator to see how well your chosen color palette works. Try to use a color-blind friendly / safe palette whenever possible. One easy way to do this is to include + scale_fill_viridis_d() or + scale_color_viridis_d() when you are filling or coloring by a discrete or categorical variable and + scale_fill_viridis_c() or + scale_color_viridis_c() when you are filling or coloring by a continuous or quantitative variable. There are many other color-blind friendly palettes in R; you can check out other resources here. Ethics Michael Correll of Tableau Research writes “Data visualizations have a potentially enormous influence on how data are used to make decisions across all areas of human endeavor.” in his article from 2018. Visualization operates at the intersection of science, communication, and data science &amp; statistics. There are professional standards of ethics in these fields of the power they hold over other people as it relates to making data-driven decisions. Correll describes three ethical challenges of visualization work: Visibility Make the invisible visible Visualize hidden labor Visualize hidden uncertainty Visualize hidden impacts Visualizations can be complex and one must consider the accessibility of the visualization to the audience. Managing complexity is, therefore, a virtue in design that can be in direct opposition with the desire to visualize the invisible. Privacy Collect data with empathy Encourage Small Data Anthropomorphize data Obfuscate data to protect privacy Restricting the type and amount of data that is collected has a direct impact on the quality and scope of the analyses hence obligation to provide context, and analytical power can, therefore, stand in direct opposition to the empathic collection of data. Power Challenge structures of power Support data due process. Act as data advocates. Pressure unethical analytical behavior. The goal of promoting truth and suppressing falsehood may require amplifying existing structures of expertise and power, and suppressing conflicts for the sake of rhetorical impact. At a minimum, you should always Present data in a way that avoids misleading the audience. Always include your data source. Doing so attributes credit for labor, provides credibility to your work, and provides context for your graphic. Design A basic principle is that a graphic is about comparison. Good graphics make it easy for people to perceive things that are similar and things that are different. Good graphics put the things to be compared “side-by-side,” that is, in perceptual proximity to one another. The following aesthetics are listed in roughly descending order of human ability to perceive and compare nearby objects:2 Position Length Angle Direction Shape (but only a very few different shapes) Area Volume Shade Color Color is the most difficult, because it is a 3-dimensional quantity. We are pretty good at color gradients, but discrete colors must be selected carefully. We need to be particularly aware of red/green color blindness issues. Visual perception and effective visualizations Here are some facts to keep in mind about visual perception from Now You See It: Visual perception is selective, and our attention is often drawn to constrasts from the norm. Figure 3.19: Our attention is drawn to contrasts to the norm. What stands out in this example image?, which is originally from C. Ware, Information Visualization: Perception for Design, 2004? Source: S. Few, Now You See It, 2009, p. 33. Implication: We should design visualizations so that the features we want to highlight stand out in contrast from those that are not worth the audience’s attention. Our eyes are drawn to familiar patterns. We see what we know and expect. Figure 3.20: Do you see anything embedded in this rose image from coolbubble.com? Source: S. Few, Now You See It, 2009, p. 34. Implication: Visualizations work best when they display information as patterns that familiar and easy to spot. Memory plays an important role in human cognition, but working memory is extremely limited. Implication: Visualizations must serve as external aids to augment working memory. If a visualization is unfamiliar, then it won’t be as effective. Gestalt principles The Gestalt principles (more info here or here) were developed by psychologists including Max Wertheimer in the early 1900s to explain how humans perceive organized patterns and objects. In a design setting, they help us understand how to incorporate preattentive features into visualizations. The figure below shows some preattentive features, all of which are processed prior to conscious attention (“at a glance”) and can help the reader focus on relevant information in a visualization. Figure 3.21: Preattentive features based on the Gestalt principles. Source: I. Meirelles, Design for Information, 2013, p. 23. Other design tips from Visualize This and Storytelling with Data: Put yourself in a reader’s shoes when you design data graphics. What parts of the data need explanation? We can minimize ambiguity by providing guides, label axes, etc. Data graphics are meant to shine a light on your data. Try to remove any elements that don’t help you do that. That is, eliminate “chart junk” (distracting and unnecessary adornments). Vary color and stroke styles to emphasize the parts in your graphic that are most important to the story you’re telling It is easier to judge length than it is to judge area or angles Be thoughtful about how your categories (levels) are ordered for categorical data. There may be a natural ordering Pie charts, donut charts, and 3D are evil Basic Rules for Constructing Graphics Instead of memorizing which plot is appropriate for which situation, it’s best to simply start to recognize patterns in constructing graphics: Each quantitative variable requires a new axis. Each categorical variable requires a new way to “group” the graphic (eg: using colors, shapes, separate facets, etc to capture the grouping). For visualizations in which overlap in glyphs or plots obscures the patterns, try faceting or transparency. Still to Come While we will not cover all of visualization theory – you can take a whole course on that at Macalester and it is a proper field in its own right – we will touch on the following types of visualizations in the coming weeks: Univariate and bivariate visualizations Visualizations of higher dimensional data Temporal structures: timelines and flows Hierarchical structures: trees Relational structures: networks Spatial structures: maps Spatio-temporal structures Textual structures Interactive graphics (e.g., gganimate, shiny) Practice Exercise 3.1 Consider one of the more complicated data graphics listed at (http://mdsr-book.github.io/exercises.html#exercise_25): What story does the data graphic tell? What is the main message that you take away from it? Can the data graphic be described in terms of the Grammar of Graphics (frame, glyphs, aesthetics, facet, scale, guide)? If so, please describe. Critique and/or praise the visualization choices made by the designer. Do they work? Are they misleading? Thought-provoking? Brilliant? Are there things that you would have done differently? Justify your response. A “negative” result (e.g., there is no correlation between two variables) is a perfectly fine story to tell.↩︎ This list is from B. S. Baumer, D. T. Kaplan, and N. J. Horton, Modern Data Science with R, 2017, p. 15. For more of the theory of perception, see also W.S. Cleveland and R. McGill, “Graphical perception: Theory, experimentation, and application to the development of graphical methods,” Journal of the American Statistical Association, 1984.↩︎ "],["bivariate-visualizations.html", "Topic 4 Bivariate Visualizations Learning Goals Alterative Text for Visualizations Bivariate Visualizations Assignment 3: due Wednesday, Feb. 8th @ 11:59pm Appendix: R Functions", " Topic 4 Bivariate Visualizations Learning Goals Identify appropriate types of bivariate visualizations, depending on the type of variables (categorical, quantitative) Create basic bivariate visualizations based on real data You can download a template .Rmd of this activity here. Put the file in the existing Assignment_03 folder within your COMP_STAT_112 folder. Alterative Text for Visualizations You should write alt text for every visualization to create. From the last activity: Alt text should concisely articulate (1) what your visualization is (e.g. a bar chart showing which the harvest rate of cucumbers), (2) a one sentence description of the what you think is the most important takeaway your visualization is showing, and (3) a link to your data source if it’s not already in the caption (check out this great resource on writing alt text for data visualizations). To add the alt text to your the HTML created from knitting the Rmd, you can include it as an option at the top of your R chunk. For example: {r, fig.alt = “Bar chart showing the daily harvest of cucumbers. The peak cucumber collection day is August 18th”}. In this activity, there will be prompts in the template Rmd but you should try to continue doing this for future assignments. Bivariate Visualizations The outcome of the 2016 presidential election surprised many people. In this activity we will analyze data from the 2016 presidential election. To better understand it ourselves, we’ll explore county-level election outcomes and demographics. The data set, prepared by Prof. Alicia Johnson, combines 2008/2012/2016 county-level election returns from Tony McGovern on github, county-level demographics from the df_county_demographics data set within the choroplethr R package, and red/purple/blue state designations from http://www.270towin.com/. Getting to know the dataset Example 4.1 Begin by loading the election data from “https://jamesnormington.github.io/112_spring_2023/data/electionDemographics16.csv” and getting to know the data. Write out R functions to get to know the data using the prompts below to guide you. # Load data from &quot;https://jamesnormington.github.io/112_spring_2023/data/electionDemographics16.csv&quot; elect &lt;- read_csv(&quot;https://jamesnormington.github.io/112_spring_2023/data/electionDemographics16.csv&quot;) # Check out the first rows of elect. What are the units of observation? # How much data do we have? # What are the names of the variables? Solution # Load data from &quot;https://jamesnormington.github.io/112_spring_2023/data/electionDemographics16.csv&quot; elect &lt;- read_csv(&quot;https://jamesnormington.github.io/112_spring_2023/data/electionDemographics16.csv&quot;) # Check out the first rows of elect. # The units of observation are county election results # The variables are county name, vote counts for parties and total for presidential elections, and more head(elect) ## # A tibble: 6 × 34 ## county total…¹ dem_2…² gop_2…³ oth_2…⁴ total…⁵ dem_2…⁶ gop_2…⁷ oth_2…⁸ total…⁹ ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Walke… 28652 7420 20722 510 28497 6551 21633 313 29243 ## 2 Bullo… 5415 4011 1391 13 5318 4058 1250 10 4701 ## 3 Calho… 49242 16334 32348 560 46240 15500 30272 468 47376 ## 4 Barbo… 11630 5697 5866 67 11459 5873 5539 47 10390 ## 5 Fayet… 7957 1994 5883 80 7912 1803 6034 75 8196 ## 6 Baldw… 81413 19386 61271 756 84988 18329 65772 887 94090 ## # … with 24 more variables: dem_2016 &lt;dbl&gt;, gop_2016 &lt;dbl&gt;, oth_2016 &lt;dbl&gt;, ## # perdem_2016 &lt;dbl&gt;, perrep_2016 &lt;dbl&gt;, winrep_2016 &lt;lgl&gt;, perdem_2012 &lt;dbl&gt;, ## # perrep_2012 &lt;dbl&gt;, winrep_2012 &lt;lgl&gt;, perdem_2008 &lt;dbl&gt;, perrep_2008 &lt;dbl&gt;, ## # winrep_2008 &lt;lgl&gt;, region &lt;dbl&gt;, total_population &lt;dbl&gt;, ## # percent_white &lt;dbl&gt;, percent_black &lt;dbl&gt;, percent_asian &lt;dbl&gt;, ## # percent_hispanic &lt;dbl&gt;, per_capita_income &lt;dbl&gt;, median_rent &lt;dbl&gt;, ## # median_age &lt;dbl&gt;, polyname &lt;chr&gt;, abb &lt;chr&gt;, StateColor &lt;chr&gt;, and … # There are 3,112 counties and 34 variables dim(elect) ## [1] 3112 34 # See the long list below names(elect) ## [1] &quot;county&quot; &quot;total_2008&quot; &quot;dem_2008&quot; ## [4] &quot;gop_2008&quot; &quot;oth_2008&quot; &quot;total_2012&quot; ## [7] &quot;dem_2012&quot; &quot;gop_2012&quot; &quot;oth_2012&quot; ## [10] &quot;total_2016&quot; &quot;dem_2016&quot; &quot;gop_2016&quot; ## [13] &quot;oth_2016&quot; &quot;perdem_2016&quot; &quot;perrep_2016&quot; ## [16] &quot;winrep_2016&quot; &quot;perdem_2012&quot; &quot;perrep_2012&quot; ## [19] &quot;winrep_2012&quot; &quot;perdem_2008&quot; &quot;perrep_2008&quot; ## [22] &quot;winrep_2008&quot; &quot;region&quot; &quot;total_population&quot; ## [25] &quot;percent_white&quot; &quot;percent_black&quot; &quot;percent_asian&quot; ## [28] &quot;percent_hispanic&quot; &quot;per_capita_income&quot; &quot;median_rent&quot; ## [31] &quot;median_age&quot; &quot;polyname&quot; &quot;abb&quot; ## [34] &quot;StateColor&quot; Example 4.2 Explore the win column: The winrep_2016 variable indicates whether or not the Republican (Trump) won the county in 2016, thus is categorical. Let’s construct both numerical and visual summaries of Trump wins/losses. (Before you do, what do you anticipate?) # Construct a table (a numerical summary) of the number of counties that Trump won/lost table(xxx) # fill in the xxx # Attach a library needed for ggplots library(xxx) # Construct a bar chart (a visual summary) of this variable. ggplot(xxx, aes(xxx)) + geom_xxx() Solution # Construct a table (a numerical summary) of the number of counties that Trump won/lost table(elect$winrep_2016) ## ## FALSE TRUE ## 487 2625 # Attach a library needed for ggplots library(ggplot2) # Construct a bar chart (a visual summary) of this variable. ggplot(elect, aes(x = winrep_2016)) + geom_bar() Figure 4.1: Count of U.S. counties that Trump won (and lost) in 2016 Example 4.3 (Explore Vote Percentages) The perrep_2016 variable includes a bit more detail about Trump’s support in each county. Since it’s quantitative we need different tools to visually explore the variability in perrep_2016. To this end, construct &amp; interpret both a histogram and density plot of perrep_2016. (Before you do, what do you anticipate?) # histogram ggplot(elect, aes(xxx)) + geom_xxx(color = &quot;white&quot;) # density plot ggplot(elect, aes(xxx)) + geom_xxx() Solution # histogram ggplot(elect, aes(x = perrep_2016)) + geom_histogram(color = &quot;white&quot;) Figure 4.2: Histogram of percentage of votes that were Republican within a U.S. county in 2016 presidential election. # density plot ggplot(elect, aes(x = perrep_2016)) + geom_density() Figure 4.3: Density plot of percentage of votes that were Republican within a U.S. county in 2016 presidential election. The vast majority of counties in the U.S. had a Republican majority vote (&gt; 50%) within that county. Thus far, we have a good sense for how Trump’s support varied from county to county. We don’t yet have a good sense for why. What other variables (ie. county features) might explain some of the variability in Trump’s support from county to county? Which of these variables do you think will be the best predictors of support? The worst? Solution Maybe past election history and information about the people that live there and the social culture and values. Let’s see… Background on visualizing relationships We’ve come up with a list of variables that might explain some of the variability in Trump’s support from county to county. Thus we’re interested in the relationship between: response variable: the variable whose variability we would like to explain (Trump’s percent of the vote) predictors: variables that might explain some of the variability in the response (percent white, per capita income, state color, etc) Our goal is to construct visualizations that allow us to examine/identify the following features of the relationships among these variables: relationship trends (direction and form) relationship strength (degree of variability from the trend) outliers in the relationship Before constructing visualizations of the relationship among any set of these variables, we need to understand what features these should have. As with univariate plots, the appropriate visualization also depends upon whether the variables are quantitative or categorical. Recall some basic rules in constructing graphics: Each quantitative variable requires a new axis. (We’ll discuss later what to do when we run out of axes!) Each categorical variable requires a new way to “group” the graphic (eg: using colors, shapes, separate facets, etc to capture the grouping) For visualizations in which overlap in glyphs or plots obscures the patterns, try faceting or transparency. Example 4.4 (Mock-Ups) Consider a subset of the variables: county abb perrep_2016 perrep_2012 winrep_2016 StateColor Elbert County CO 73.53 72.52 TRUE blue Rockdale County GA 35.82 41.37 FALSE purple Clay County MN 46.55 44.91 TRUE blue McDonald County MO 80.15 72.84 TRUE purple Alcorn County MS 79.95 75.11 TRUE red Roger Mills County OK 87.94 83.75 TRUE red In groups, sketch on paper a mock-up of a visualization of the relationship between the given pair of variables (i.e., what type of chart is appropriate to demonstrate the relationship?): The relationship between perrep_2016 (the response) and perrep_2012 (the predictor). The relationship between perrep_2016 (the response) and StateColor (the predictor). Think: how might we modify the below density plot of perrep_2016 to distinguish between counties in red/purple/blue states? ggplot(elect, aes(x = perrep_2016)) + geom_density() The relationship between Trump’s county-levels wins/losses winrep_2016 (the response) and StateColor (the predictor). Think: how might we modify the below bar plot of winrep_2016 to distinguish between counties in red/purple/blue states? ggplot(elect, aes(x = winrep_2016)) + geom_bar() Visualizing quantitiative vs quantitative relationships Let’s start by exploring the relationship between Trump’s 2016 support (perrep_2016) and Romney’s 2012 support (perrep_2012), both quantitative variables. Example 4.5 (Scatterplots and Glyphs) Both perrep_2016 and perrep_2012 are quantitative, thus require their own axes. Traditionally, the response variable (what we are trying to predict or explain) is placed on the y-axis. Once the axes are set up, each case is represented by a “glyph” at the coordinates defined by these axes. Make a scatterplot of perrep_2016 vs perrep_2012 with different glyphs: points or text. # just a graphics frame ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) # add a layer with &quot;point&quot; glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() # add a layer with symbol glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point(shape = 3) # add a layer with &quot;text&quot; glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_text(aes(label = abb)) Solution # just a graphics frame ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) # add a layer with &quot;point&quot; glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() # add a layer with symbol glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point(shape = 3) # add a layer with &quot;text&quot; glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_text(aes(label = abb)) ## Warning: Removed 398 rows containing missing values (`geom_text()`). Summarize the relationship between the Republican candidates’ support in 2016 and 2012. Be sure to comment on: - the strength of the relationship (weak/moderate/strong) - the direction of the relationship (positive/negative) - outliers (In what state do counties deviate from the national trend? Explain why this might be the case) Solution There is a strong positive relationship between the Republican support from 2012 to 2016, meaning that if a county highly favors a Republican candidate in 2012, they were likely to highly favor a Republican in 2016. Counties in Utah seems to not quite follow this pattern with lower support in 2016 than what you’d expect given the support in 2012. This is because the 2012 candidate was from Utah (data context!). Example 4.6 (Capture the Trend with 'smooths') The trend of the relationship between perrep_2016 and perrep_2012 is clearly positive and (mostly) linear. We can highlight this trend by adding a model “smooth” to the plot. Add a layer with a model smooth: ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() + geom_smooth() Solution ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() + geom_smooth()   Construct a new plot that contains the model smooth but does not include the individual cases (eg: point glyphs). Solution ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_smooth() Notice that there are gray bands surrounding the blue model smooth line. What do these gray bars illustrate/capture and why are they widest at the “ends” of the model? Solution There are fewer data points at the “ends” so there is more uncertainty about the relationship. By default, geom_smooth adds a smooth, localized model line. To examine the “best” linear model, we can specify method=\"lm\": ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() + geom_smooth(method = &quot;lm&quot;) Solution ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() + geom_smooth(method = &quot;lm&quot;) Example 4.7 (Modify the Scatterplots) As with univariate plots, we can change the aesthetics of scatterplots. Add appropriate axis labels to your scatterplot. Label the y-axis “Trump 2016 support (%)” and label the x-axis “Romney 2012 support (%)”. Change the color of the points. Add some transparency to the points. NOTE: alpha can be between 0 (complete transparency) and 1 (no transparency). Why is transparency useful in this particular graphic? Solution ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point(color = &quot;red&quot;, alpha = 0.1) + labs(x = &quot;Romney 2012 support (%)&quot;, y = &quot;Trump 2016 support (%)&quot;) + theme_classic() Exercise 4.1 (More Scatterplots) 2012 results aren’t the only possible predictor of 2016 results. Consider two more possibilities. Construct a scatterplot of perrep_2016 and median_rent. Summarize the relationship between these two variables. Construct a scatterplot of perrep_2016 and percent_white. Summarize the relationship between these two variables. Among perrep_2012, median_rent and percent_white, which is the best predictor of perrep_2016? Why? Visualizing quantitative vs. categorical relationships Consider a univariate histogram and density plot of perrep_2016: To visualize the relationship between Trump’s 2016 support (perrep_2016) and the StateColor (categorical) we need to incorporate a grouping mechanism. Work through the several options below. Example 4.8 (Side-by-Side Density Plots) We can show density plots for each state color next to each other: Construct a density plot for each group. ggplot(elect, aes(x = perrep_2016, fill = StateColor)) + geom_density() Notice that ggplot randomly assigns colors to group based on alphabetical order. In this example, the random color doesn’t match the group itself (red/purple/blue)! We can fix this: ggplot(elect, aes(x = perrep_2016, fill = StateColor)) + geom_density() + scale_fill_manual(values = c(&quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;)) The overlap between the groups makes it difficult to explore the features of each. One option is to add transparency to the density plots: ggplot(elect, aes(x = perrep_2016, fill = StateColor)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c(&quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;)) Yet another option is to separate the density plots into separate “facets” defined by group: ggplot(elect, aes(x = perrep_2016, fill = StateColor)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c(&quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;)) + facet_wrap(~ StateColor) Exercise 4.2 (Side-by-Side Histograms) Let’s try a similar strategy using histograms to illustrate the relationship between perrep_2016 and StateColor. Start with the default histogram: ggplot(elect, aes(x = perrep_2016, fill = StateColor)) + geom_histogram(color = &quot;white&quot;) That’s not very helpful! Separate the histograms into separate facets for each StateColor group. Example 4.9 (More Options!) Density plots and histograms aren’t the only type of viz we might use… Construct side-by-side violins and side-by-side boxplots (see description below). # violins instead ggplot(elect, aes(y = perrep_2016, x = StateColor)) + geom_violin() # boxes instead ggplot(elect, aes(y = perrep_2016, x = StateColor)) + geom_boxplot() Box plots are constructed from five numbers - the minimum, 25th percentile, median, 75th percentile, and maximum value of a quantitative variable: In the future, we’ll typically use density plots instead of histograms, violins, and boxes. Explain at least one pro and one con of the density plot. Exercise 4.3 Let’s not forget the most important purpose of these visualizations! Summarize the relationship between Trump’s 2016 county-level support among red/purple/blue states. Visualizing categorical vs categorical relationships Finally, suppose that instead of Trump’s percentage support, we simply want to explore his county-level wins/losses: Specifically, let’s explore the relationship between winrep_2016 and StateColor, another categorical variable. Exercise 4.4 (Side-by-side bar plots) We saw above that we can incorporate a new categorical variable into a visualization by using grouping features such as color or facets. Let’s add information about StateColor to our bar plot of winrep_2016. Construct the following 4 bar plot visualizations. # a stacked bar plot ggplot(elect, aes(x = StateColor, fill = winrep_2016)) + geom_bar() # a side-by-side bar plot ggplot(elect, aes(x = StateColor, fill = winrep_2016)) + geom_bar(position = &quot;dodge&quot;) # a proportional bar plot ggplot(elect, aes(x = StateColor, fill = winrep_2016)) + geom_bar(position = &quot;fill&quot;) # faceted bar plot ggplot(elect, aes(x = StateColor, fill = winrep_2016)) + geom_bar() + facet_wrap(~winrep_2016) Name one pro and one con of using the “proportional bar plot” instead of one of the other three options. What’s your favorite bar plot from part (a)? Why? Assignment 3: due Wednesday, Feb. 8th @ 11:59pm Hot Dogs In the annual Nathan’s hot dog eating contest, people compete to eat as many hot dogs as possible in ten minutes. Data on past competitions were compiled by Nathan Yau for “Visualize This: The FlowingData Guide to Design, Visualization, and Statistics”: hotdogs &lt;- read_csv(&quot;http://datasets.flowingdata.com/hot-dog-contest-winners.csv&quot;) Exercise 4.5 Address the following: Construct a visualization of the winning number of hot dogs by year. THINK: Which is the response variable? Temporal trends are often visualized using a line plot. Add a geom_line() layer to your plot from part (a). Summarize your observations about the temporal trends in the hot dog contest. Exercise 4.6 All but two of the past winners are from the U.S. or Japan: table(hotdogs$Country) ## ## Germany Japan Mexico United States ## 1 9 1 20 Use the following code to filter out just the winners from U.S. and Japan and name this hotdogsSub. (Don’t worry about the code itself - we’ll discuss similar syntax later in the semester!) library(dplyr) hotdogsSub &lt;- hotdogs %&gt;% filter(Country %in% c(&quot;Japan&quot;, &quot;United States&quot;)) Using a density plot approach without facets, construct a visualization of how the number of hot dogs eaten varies by country. Repeat part a using a density plot approach with facets. Repeat part a using something other than a density plot approach. (There are a few options!) Summarize your observations about the number of hot dogs eaten by country. The Bechdel Test Recall the “Bechdel test” data from the previous activity. As a reminder, the “Bechdel test” tests whether movies meet the following criteria: there are \\(\\ge\\) 2 female characters the female characters talk to each other at least 1 time, they talk about something other than a male character In the fivethirtyeight.com article “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women”, the authors analyze which Hollywood movies do/don’t pass the test. Their data are available in the fivethirtyeight package: library(fivethirtyeight) data(bechdel) In investigating budgets and profits, the authors “focus on films released from 1990 to 2013, since the data has significantly more depth since then.” Use the following code to filter out just the movies in these years and name the resulting data set Beyond1990 (don’t worry about the syntax): library(dplyr) Beyond1990 &lt;- bechdel %&gt;% filter(year &gt;= 1990) Exercise 4.7 Address the following: Construct a visualization that addresses the following research question: Do bigger budgets (budget_2013) pay off with greater box office returns (domgross_2013)? In constructing this visualization, add a smooth to highlight trends and pay attention to which of these variables is the response. Using your visualization as supporting evidence, answer the research question. Part of the fivethirtyeight article focuses on how budgets (budget_2013) differ among movies with different degrees of female character development (clean_test). Construct a visualization that highlights the relationship between these two variables. There are many options - some are better than others! Using your visualization as supporting evidence, address fivethirtyeight’s concerns. Exercise 4.8 NOTE: The following exercise is inspired by a similar exercise proposed by Albert Kim, one of the fivethirtyeight package authors. Return to the fivethirtyeight.com article and examine the plot titled “The Bechdel Test Over Time”. Summarize the trends captured by this plot. (How has the representation of women in movies evolved over time?) Recreate this plot from the article! To do so, you’ll need to create a new data set named newbechdel in which the order of the Bechdel categories (clean_test) and the year categories (yearCat) match those used by fivethirtyeight. Don’t worry about the syntax: library(dplyr) newbechdel &lt;- bechdel %&gt;% mutate(clean_test = factor(bechdel$clean_test, c(&quot;nowomen&quot;, &quot;notalk&quot;, &quot;men&quot;, &quot;dubious&quot;, &quot;ok&quot;))) %&gt;% mutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5))) Further, you’ll need to add the following layer in order to get a color scheme that’s close to that in the article: scale_fill_manual(values = c(&quot;red&quot;, &quot;salmon&quot;, &quot;pink&quot;, &quot;steelblue1&quot;, &quot;steelblue4&quot;)) NOTE: that your plot won’t look exactly like the authors’, but should be close to this: Appendix: R Functions Data Wrangling R functions Function/Operator Action Example filter(data,condition) Provide rows of a data set that satisfy a condition bechdel %&gt;% filter(year &gt;= 1990) mutate(data,varname =) Create a new variable bechdel %&gt;% mutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5))) cut(x,breaks) Cut a quantitative variable into categories by the break points bechdel %&gt;% mutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5))) ggplot2 foundation functions Function/Operator Action Example ggplot(data) Create a blank canvas that can create a visualization based on data ggplot(data = elect) + geom_bar(aes(x)) Add a bar plot geom_bar(aes(x = winrep_2016)) + geom_bar(aes(x,fill),position='fill') Add a propotional bar plot geom_bar(aes(x = winrep_2016,fill = StateColor),position='fill') + geom_bar(aes(x,fill),position='dodge') Add a side-by-side bar plot geom_bar(aes(x = winrep_2016,fill = StateColor),position='dodge') + geom_smooth(aes(x,y)) Add a smoothed average curve of scatterplot geom_smooth() + geom_smooth(aes(x,y),method='lm') Add a best fit line to a scatterplot geom_smooth(method='lm') + geom_point(aes(x,y)) Add a scatterplot geom_bar(aes(x = year,y=budget_2013)) + geom_text(aes(x,y,label)) Add a text to a plot geom_text(aes(label=abb)) + facet_wrap(~x) Facet a plot (break into subplots based on groups) facet_wrap(~StateColor) For today’s example, you may have to install the following packages: #install.packages(c(&quot;gganimate&quot;, &quot;nytimes&quot;, &quot;kableExtra&quot;, &quot;av&quot;, &quot;zoo&quot;, &quot;xts&quot;, &quot;dygraphs&quot;, &quot;rngWELL&quot;, &quot;randtoolbox&quot;, &quot;lcmm&quot;, &quot;msm&quot;, &quot;lmtest&quot;, &quot;sandwich&quot;, &quot;mailmerge&quot;, &quot;tidycensus&quot;, &quot;survey&quot;, &quot;srvyr&quot;, &quot;rattle&quot;)) "],["multivariate-visualizations.html", "Topic 5 Multivariate Visualizations Learning Goals Adding More Aesthetic Attributes Other Multivariate Visualization Techniques", " Topic 5 Multivariate Visualizations Learning Goals Understand how we can use additional aesthetics such as color and size to incorporate a third (or more variables) to a bivariate plot Develop comfort with interpreting heat maps and star plots, which allow you to look for patterns in variation in many variables. You can download a template .Rmd of this activity here. Put this in a new folder called Assignment_04 in your folder for COMP_STAT_112. Adding More Aesthetic Attributes Exploring SAT Scores Though far from a perfect assessment of academic preparedness, SAT scores have historically been used as one measurement of a state’s education system. The education data contain various education variables for each state: education &lt;- read.csv(&quot;https://bcheggeseth.github.io/112_spring_2023/data/sat.csv&quot;) Table 5.1: The first few rows of the SAT data. State expend ratio salary frac verbal math sat fracCat Alabama 4.405 17.2 31.144 8 491 538 1029 (0,15] Alaska 8.963 17.6 47.951 47 445 489 934 (45,100] Arizona 4.778 19.3 32.175 27 448 496 944 (15,45] Arkansas 4.459 17.1 28.934 6 482 523 1005 (0,15] California 4.992 24.0 41.078 45 417 485 902 (15,45] Colorado 5.443 18.4 34.571 29 462 518 980 (15,45] A codebook is provided by Danny Kaplan who also made these data accessible: Figure 5.1: Codebook for SAT data. Source: Danny Kaplan To examine the variability in average SAT scores from state to state, let’s start with a univariate density plot: ggplot(education, aes(x = sat)) + geom_density(fill = &quot;blue&quot;, alpha = .5) + theme_classic() The first question we’d like to answer is to what degree do per pupil spending (expend) and teacher salary explain this variability? We can start by plotting each against sat, along with a best fit linear regression model: ggplot(education, aes(y = sat, x = salary)) + geom_point() + geom_smooth(se = FALSE, method = &quot;lm&quot;) + theme_classic() ggplot(education, aes(y = sat, x = expend)) + geom_point() + geom_smooth(se = FALSE, method = &quot;lm&quot;) + theme_classic() Example 5.1 Is there anything that surprises you in the above plots? What are the relationship trends? Solution These seem to suggest that spending more money on students or teacher salaries correlates with lower SAT scores. Say it ain’t so! Example 5.2 Make a single scatterplot visualization that demonstrates the relationship between sat, salary, and expend. Summarize the trivariate relationship between sat, salary, and expend. Hints: 1. Try using the color or size aesthetics to incorporate the expenditure data. 2. Include some model smooths with geom_smooth() to help highlight the trends. Solution Below are four different plots that one could make. There seems to be a high correlation between expend and salary, and both seem to be negatively correlated with sat. #plot 1 g1 &lt;- ggplot(education, aes(y=sat, x=salary, color=expend)) + geom_point() + geom_smooth(se=FALSE, method=&quot;lm&quot;) + theme_classic() #plot 2 g2 &lt;- ggplot(education, aes(y=sat, x=salary, size=expend)) + geom_point() + geom_smooth(se=FALSE, method=&quot;lm&quot;) + theme_classic() #plot 3 g3 &lt;- ggplot(education, aes(y=sat, x=salary, color=cut(expend,2))) + geom_point() + geom_smooth(se=FALSE, method=&quot;lm&quot;) + theme_classic() #plot 4 g4 &lt;- ggplot(education, aes(y=sat, x=salary, color=cut(expend,3))) + geom_point() + geom_smooth(se=FALSE, method=&quot;lm&quot;) + theme_classic() library(gridExtra) grid.arrange(g1, g2, g3, g4, ncol=2) ## Warning: The following aesthetics were dropped during statistical transformation: colour ## ℹ This can happen when ggplot fails to infer the correct grouping structure in the data. ## ℹ Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor? ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## Warning: The following aesthetics were dropped during statistical transformation: size ## ℹ This can happen when ggplot fails to infer the correct grouping structure in the data. ## ℹ Did you forget to specify a `group` aesthetic or to convert a numerical variable into a factor? Exercise 5.1 The fracCat variable in the education data categorizes the fraction of the state’s students that take the SAT into low (below 15%), medium (15-45%), and high (at least 45%). Make a univariate visualization of the fracCat variable to better understand how many states fall into each category. Make a bivariate visualization that demonstrates the relationship between fracCat and sat. What story does your graphic tell? Make a trivariate visualization that demonstrates the relationship between fracCat, sat, and expend. Incorporate fracCat as the color of each point, and use a single call to geom_smooth to add three trendlines (one for each fracCat). What story does your graphic tell? Putting all of this together, explain this example of Simpson’s Paradox. That is, why does it appear that SAT scores decrease as spending increases even though the opposite is true? Other Multivariate Visualization Techniques Heat maps Note that each variable (column) is scaled to indicate states (rows) with high values (yellow) to low values (purple/blue). With this in mind you can scan across rows &amp; across columns to visually assess which states &amp; variables are related, respectively. You can also play with the color scheme. Type ?cm.colors in the console to see various options. ed &lt;- as.data.frame(education) # convert from tibble to data frame # convert to a matrix with State names as the row names row.names(ed) &lt;- ed$State #added state names as the row names rather than a variable ed &lt;- ed %&gt;% select(2:8) #select the 2nd through 8th columns ed_mat &lt;- data.matrix(ed) #convert to a matrix format heatmap.2(ed_mat, Rowv = NA, Colv = NA, scale = &quot;column&quot;, keysize = 0.7, density.info = &quot;none&quot;, col = hcl.colors(256), margins = c(10, 20), colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05), sepcolor = &quot;white&quot;, cexRow = 2, cexCol = 2, trace = &quot;none&quot;, dendrogram = &quot;none&quot; ) Exercise 5.2 What do you notice? What insight do you gain about the variation across U.S. states? Heat map with row clusters It can be tough to identify interesting patterns by visually comparing across rows and columns. Including dendrograms helps to identify interesting clusters. heatmap.2(ed_mat, Rowv = TRUE, #this argument changed Colv = NA, scale = &quot;column&quot;, keysize = .7, density.info = &quot;none&quot;, col = hcl.colors(256), margins = c(10, 20), colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05), sepcolor = &quot;white&quot;, cexRow = 2, cexCol = 2, trace = &quot;none&quot;, dendrogram = &quot;row&quot; #this argument changed ) Exercise 5.3 What new insight do you gain about the variation across U.S. states, now that states are grouped and ordered by similarity? Heat map with column clusters We can also construct a heat map which identifies interesting clusters of columns (variables). heatmap.2(ed_mat, Colv = TRUE, #this argument changed Rowv = NA, scale = &quot;column&quot;, keysize = .7, density.info = &quot;none&quot;, col = hcl.colors(256), margins = c(10, 20), colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05), sepcolor = &quot;white&quot;, cexRow = 2, cexCol = 2, trace = &quot;none&quot;, dendrogram = &quot;column&quot; #this argument changed ) Exercise 5.4 What new insight do you gain about the variation across U.S. states, now that variables are grouped and ordered by similarity? Star plots There’s more than one way to visualize multivariate patterns. Like heat maps, these star plot visualizations indicate the relative scale of each variable for each state. With this in mind, you can use the star maps to identify which state is the most “unusual.” You can also do a quick scan of the second image to try to cluster states. How does that clustering compare to the one generated in the heat map with row clusters above? stars(ed_mat, flip.labels = FALSE, locations = data.matrix(as.data.frame(state.center)), #added external data to arrange by geo location key.loc = c(15, 1.5), cex = 1 ) stars(ed_mat, flip.labels = FALSE, locations = data.matrix(as.data.frame(state.center)), #added external data to arrange by geo location key.loc = c(15, 1.5), cex = 1, draw.segments = TRUE #changed argument ) Exercise 5.5 What new insight do you gain about the variation across U.S. states with the star plots (arranged geographically) as compared to heat plots? "],["spatial-visualization.html", "Topic 6 Spatial Visualization Learning Goals Motivation Plotting Points on a Map Contour Maps Choropleths Dynamnic Maps with leaflet Assignment 4: due Wednesday, February 15th @ 11:59pm Appendix: R Functions", " Topic 6 Spatial Visualization Learning Goals Plot data points on top of a map using the ggmap() function along with ggplot2 functions Create choropleth maps using geom_map() Add points and other ggplot2 features to a map created from geom_map() Understand the basics of creating a map using leaflet, including adding points and choropleths to a base map You can download a template .Rmd of this activity here. Put this in the existing folder called Assignment_04 in your folder for COMP_STAT_112. Motivation Take a look at these to get motivated/inspired to make your own: NYT article on effects of redlining NY Times mayoral primaries Super zip shiny app Plotting Points on a Map There are many ways we could visually represent data on a map. The first we’ll talk about it in terms of points in a coordinate system (longitudinal, latitude). Starbucks Example The Starbucks data, compiled by Danny Kaplan, contains information about every Starbucks in the world at the time the data were collected. It includes the Latitude and Longitude of each location. Let’s start by using familiar ggplot plotting tools. # Starbucks locations Starbucks &lt;- read_csv(&quot;https://jamesnormington.github.io/112_spring_2023/data/starbucks.csv&quot;) ggplot(data = Starbucks) + geom_point(aes(x = Longitude, y = Latitude), alpha = 0.2, size = 0.2 ) + theme_classic() The code for a point pattern probably looks familiar. To highlight the geographical nature of this scatterplot, we can superimpose the points on top of a background map, using the ggmap() function from the ggmap library. NOTE: We used to be able to easily bring in Google maps. As of mid-2018, in order to bring those in, you need to have a registered API key with Google. If you want to do that, see google_key in the help. Then, see the documentation for get_map(). We will bring in other types of maps since Google maps are harder to do now and require you to submit credit card information. We will use a stamen map as our background. You can also take a look at stamen maps on their website. First, let’s look at an example. # Get the map information world &lt;- get_stamenmap( bbox = c(left = -180, bottom = -57, right = 179, top = 82.1), maptype = &quot;terrain&quot;, zoom = 2 ) # Plot the points on the map ggmap(world) + # creates the map &quot;background&quot; geom_point( data = Starbucks, aes(x = Longitude, y = Latitude), alpha = .3, size = 0.2 ) + theme_map() Next, we will walk through the get_stamenmap() function inputs or arguments. The code below is what was used to get the world map information. get_stamenmap( bbox = c(left = -180, bottom = -57, right = 179, top = 82.1), maptype = &quot;terrain&quot;, zoom = 2 ) bbox The bbox argument tells it the minimum and maximum latitude and longitude points. So, left is the minimum longitude, right is the maximum longitude, bottom is the minimum latitude, and top is the maximum latitude. Helpful Resource: One helpful trick is to go to openstreetmap: zoom in on the area of interest, click export (you can customize the area you want to export), and you will see all the values you need (left, bottom, right, top). You may have to modify them slightly, which you can do after your initial plot. maptype The maptype tells it the style of the map. Check out the different options by looking in the get_stamenmap help (type ?get_stamenmap in the console). zoom When you make a large area, you need to decrease the zoom, otherwise it will take too long to load. So, it’s a good idea to start with a small zoom and you can always make it bigger if you want. This might seem counter-intuitive at first. Think of the zoom level as the level of detail. So, smaller numbers show less detail and larger numbers more detail. Helpful Trick go to the stamanmaps webpage and search for the location you are mapping. Then, in the URL, you can see the zoom number. For example, this link is a map of St. Paul: http://maps.stamen.com/#terrain/12/44.9531/-93.0904. Notice the number 12 next to /#terrain/. That means it is zoomed in at 12. ggmap() We save the the map information from get_stamenmap() to a named value and then use it in ggmap(). The ggmap() function will print the “background” map. Think of it as the providing the canvas on which we will plot. This takes the place of our usual ggplot(). ggmap(world) After that, we can use the geom_XXX() functions from ggplot2 that we are used to in order to put points, lines, etc. on top of the map. But, we need to remember to also provide the data we are using in the geom_XXX() function(s) we use since we do not have the ggplot() function in which to provide it. theme_map() The last line of the code is theme_map(). This is optional, but it often makes it look nice. It removes excess axis lines and moves guides/legends. So, the final map as a world map as the background with points plotted on top that show the Starbucks locations. The points are 20 percent (0.2) of their usual size and have a transparency level of 0.3. Resources Prof. Lendway’s demo video ggmap examples from ggmap maintainer David Kahle ggmap cheatsheet Examples: More with Starbucks Example 6.1 Now it is your turn to work with the Starbucks data. Add an aesthetic to the world map that sets the color of the points according to the ownership type. What, if anything, can you deduce from this visualization? Construct a new map of Starbucks locations in the Twin Cities metro area (approximately the five county metro area). In the Twin Cities plot, play with the zoom number. What does it do? (just describe what it does - don’t actually include more than one map). Try a couple different map types (see get_stamenmap() in help and look at maptype). Include a map with one of the other map types. Add a point to the map that indicates Macalester College and label it appropriately. There are many ways you can do this, but it may be easiest with the annotate() function (see ggplot2 cheatsheet). Solution # a) ggmap(world) + geom_point( data = Starbucks, aes( x = Longitude, y = Latitude, color = `Ownership Type` ), alpha = .5, size = .2 ) + scale_color_manual(values = c(&quot;blue&quot;, &quot;red&quot;, &quot;black&quot;, &quot;purple&quot;)) + theme_map() + theme(legend.background = element_blank()) + guides(color = guide_legend(override.aes = list(size = 2,alpha = 1))) It appears that most of the locations in the western hemisphere are company owned or licensed, while franchising is more common in western Europe and joint ventures are more common in eastern Asia. # b) TwinCities &lt;- get_stamenmap( bbox = c(left = -94, bottom = 44.5, right = -92.5, top = 45.5), maptype = &quot;toner&quot;, zoom = 10 ) ggmap(TwinCities) + geom_point( data = Starbucks, aes(x = Longitude, y = Latitude), alpha = .7, size = .7, color = &quot;red&quot; ) A higher zoom number leads to more detail. # d) TwinCities2 &lt;- get_stamenmap( bbox = c(left = -94.5, bottom = 44.3, right = -91.94, top = 45.5), maptype = &quot;watercolor&quot;, zoom = 10 ) ggmap(TwinCities2) + geom_point( data = Starbucks, aes(x = Longitude, y = Latitude), alpha = .7, size = 1, color = &quot;#00704A&quot; ) # e) ggmap(TwinCities) + geom_point( data = Starbucks, aes(x = Longitude, y = Latitude), alpha = .8, size = 1, color = &quot;#00704A&quot; ) + annotate( geom = &quot;point&quot;, x = -93.1712321, y = 44.9378965, color = &quot;orange&quot; ) + annotate( geom = &quot;text&quot;, x = -93.1712321, y = 44.91, color = &quot;darkorange&quot;, label = &quot;MAC&quot; ) + theme_map() + theme(legend.background = element_blank()) Contour Maps The geom_density_2d and stat_density_2d functions are great for plotting distributions over spatial regions. Here are examples that shows the densities of Starbucks in the North America. US_map2 &lt;- get_stamenmap( bbox = c(left = -132, bottom = 20, right = -65, top = 55), maptype = &quot;toner-lite&quot;, zoom = 5 ) # Contour plot ggmap(US_map2) + geom_density_2d(data = Starbucks, aes(x = Longitude, y = Latitude), size = 0.3) + theme_map() # Density plot ggmap(US_map2) + stat_density_2d( data = Starbucks, aes(x = Longitude, y = Latitude, fill = stat(level)), size = 0.1, alpha = .2, bins = 20, geom = &quot;polygon&quot;, color = &#39;darkblue&#39; ) + scale_alpha(guide = &#39;none&#39;) + scale_fill_gradient( low = &quot;darkblue&quot;, high = &quot;red&quot;, guide = &#39;none&#39; ) + theme_map() Choropleths Geographical data needn’t be expressed by latitude and longitude. For choropleth maps, instead of visualizing our data as points with different aesthetics (size, color, transparency, etc.), we color different regions (or mathematically, polygons) on the maps based on data values. To do this we need to specify both the geometric regions on which the data resides (counties, states, zip codes, etc.), and then wrangle the data so that there is one value per region. Let’s return to the Starbucks data. First, we will create a new dataset, starbucks_us_by_state that limits the data to the US, finds the number of Starbucks in each state, and creates a state name that is in all lowercase letters that matches the state name in the region variable of the states_map dataset. The states_map dataset gives information about creating the borders of the US states. The data is retrieved using the map_data() function. Run ?map_data in the console to see more information about what other maps are available. There are also other packages that provide different types of maps. Then, we can use geom_map() to create a choropleth map. Let’s take a look at the map and we’ll go through the details after. # Create a new Starbucks dataset that # - filters to the US # - summarizes the number of Starbucks in each state # - has full names of states in lowercase letters (to match to states_map data created next) starbucks_us_by_state &lt;- Starbucks %&gt;% filter(Country == &quot;US&quot;) %&gt;% count(`State/Province`) %&gt;% mutate(state_name = str_to_lower(abbr2state(`State/Province`))) # US states map information - coordinates used to draw borders states_map &lt;- map_data(&quot;state&quot;) # map that colors state by number of Starbucks starbucks_us_by_state %&gt;% ggplot() + geom_map( map = states_map, aes( map_id = state_name, fill = n ) ) + # This assures the map looks decently nice: expand_limits(x = states_map$long, y = states_map$lat) + theme_map() Now, let’s look more closely at what each piece of the code below is doing. starbucks_us_by_state %&gt;% ggplot() + geom_map( map = states_map, aes( map_id = state_name, fill = n ) ) + expand_limits(x = states_map$long, y = states_map$lat) + theme_map() Choose a Map The map argument tells R at which level to create the map. Really, it tells it how to draw all the borders This is a very special data set. According to the geom_map() documentation, it is a “data frame that contains the map coordinates … It must contain columns x or long, y or lat, and region or id.” We are using the map_data() function to create the map file (see above for more details. You can open the map data, states_map, and see that it adheres to the rules. Connect Map ID/Region Variable to Data Being Plotted The map_id inside of aes() is a required aesthetic for the geom_map() geom. It tells R which variable is the region/id variable, in this case the state. It connects the region or id from the map (region variable in states_map dataset, in this example) to the dataset being plotted (state_name in starbucks_us_by_state, in this example). So state_name needs to have the same form as region, which is why we modified the state names in starbucks_us_by_state. Use ggplot2 Features We tell it to fill in the states by the variable n, the number of Starbucks in each state. With the geom_map() geom, it will fill in the borders of the regions we defined in the map argument. expand_limits() Use expand_limits() to assure that the map covers the entire area it’s supposed to. We put the longitude variable from states_map for the x argument and the latitude variable from states_map for the y argument to assure the map stretches across the entire range of longitudes and latitudes in the map. theme_map() This is a personal preference, but theme_map() often makes the map look nicer. Add ggplot2 Layers You can add any of the ggplot2 layers on top of this map. In this example, we’ve added MN Starbucks as points, included a title, and changed the legend background (so it doesn’t have one). starbucks_us_by_state %&gt;% ggplot() + geom_map( map = states_map, aes( map_id = state_name, fill = n ) ) + geom_point( data = Starbucks %&gt;% filter(`State/Province` == &quot;MN&quot;), aes(x = Longitude, y = Latitude), size = 0.05, alpha = 0.2, color = &quot;goldenrod&quot; ) + expand_limits(x = states_map$long, y = states_map$lat) + labs(title = &quot;Starbucks in MN&quot;) + theme_map() + theme(legend.background = element_blank()) Resources Prof. Lendway’s demo video ggplot2 documentation Example by Arie Voorman (some things could be out of date since it’s from 2015) Alternative Methods There are plenty of other methods available to make choropleths in R. Let’s demonstrate just three additional methods with data on the 2016 U.S. presidential election results by county: elect &lt;- read_csv(&quot;https://jamesnormington.github.io/112_spring_2023/data/electionDemographics16.csv&quot;) # reformat the FIPS region codes elect &lt;- elect %&gt;% mutate(fips = ifelse(region &lt; 10000, paste(&quot;0&quot;, as.character(region), sep = &quot;&quot;), as.character(region))) # define appropriate (&amp; nicely labeled) breaks elect$brk &lt;- cut(elect$perrep_2016, breaks = seq(0, 100, by = 10), labels = c( &quot;0-9&quot;, &quot;10-19&quot;, &quot;20-29&quot;, &quot;30-39&quot;, &quot;40-49&quot;, &quot;50-59&quot;, &quot;60-69&quot;, &quot;70-79&quot;, &quot;80-89&quot;, &quot;90-100&quot; ), include.lowest = TRUE ) First, we will load a map of the counties in the United States: county_map &lt;- socviz::county_map # from socviz library mapping_data &lt;- elect %&gt;% rename(id = fips) %&gt;% left_join(county_map, by = &quot;id&quot;) Now here is the map with the method from above, using ggplot + geom_map: ggplot(elect) + geom_map(data = elect, map = county_map, aes(map_id = fips, fill = brk)) + scale_fill_manual(values = rev(brewer.pal(10, &quot;RdBu&quot;)), name = &quot;Percent Republican&quot;) + expand_limits(x = county_map$long, y = county_map$lat) + theme_map() + theme(legend.position = &quot;right&quot;) Alternative 1: ggplot + geom_polygon ggplot(mapping_data, aes(x = long, y = lat, fill = perrep_2016, group = group)) + coord_equal() + geom_polygon(color = NA) + scale_fill_gradientn(name = &quot;Percent Republican&quot;, colours = c(&quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;), values = scales::rescale(seq(0, 100, by = 10))) + theme_map() + theme(legend.position = &quot;right&quot;) Alternative 2: plot_usmap # This function is in the usmap package plot_usmap(data = elect, values = &quot;brk&quot;, color = NA, exclude = &quot;AK&quot;) + scale_fill_manual(values = rev(brewer.pal(10, &quot;RdBu&quot;)), name = &quot;Percent Republican&quot;) + theme(legend.position = &quot;right&quot;) Practice: Even More with Starbucks The example above did not account for population of each state in the map. In the code below, a new variable is created, starbucks_per_10000, that gives the number of Starbucks per 10,000 people. It is in the starbucks_with_2018_pop_est dataset. Here is a link to the data census_pop_est_2018 &lt;- read_csv(&quot;https://jamesnormington.github.io/112_fall_2022/data/us_census_2018_state_pop_est.csv&quot;) %&gt;% separate(state, into = c(&quot;dot&quot;, &quot;state&quot;), extra = &quot;merge&quot;) %&gt;% select(-dot) %&gt;% mutate(state = str_to_lower(state)) starbucks_with_2018_pop_est &lt;- starbucks_us_by_state %&gt;% left_join(census_pop_est_2018, by = c(&quot;state_name&quot; = &quot;state&quot;) ) %&gt;% mutate(starbucks_per_10000 = (n / est_pop_2018) * 10000) Exercise 6.1 Create a choropleth state map that shows the number of Starbucks per 10,000 people on a map of the US. Use a new fill color palette for the states, add points for all Starbucks in the contiguous US, add an informative title for the plot, and include a caption that says who created the plot (you!). Make a conclusion about what you observe. Dynamnic Maps with leaflet Leaflet is an open-source JavaScript library for creating maps. It can be used outside of R, but we will only discuss using the leaflet library in R. This library uses a different plotting framework from ggplot2 although it still has a tidyverse feel due to its use of the pipe, %&gt;% and the way it adds layers to the plot, just like in ggplot2. Steps to Create a Map Create a map widget by calling leaflet() and telling it the data to use. Add a base map using addTiles() (the default) or addProviderTiles(). Add layers to the map by using layer functions (e.g. , addMarkers(), addPolygons()) to modify the map widget. Repeat step 3 as desired. Print the map widget to display it. Creating a Map with Markers/Points Below, we create a basic map and add points of interest (the points are a layer on the map). The data are in favorite_msp, created below. The function we will use to create the maps will look for certain variable names for latitude (lat, latitude) and longitude (lng, long, or longitude). If you do not name them one of those things or if the data you are using doesn’t name them that, you need to call out the name explicitly (you’ll see that next). You can use a “two-finger scroll” to zoom in and out. favorite_msp &lt;- tibble( place = c( &quot;Macalester College&quot;, &quot;Stone Arch Bridge&quot;, &quot;Lake Harriet&quot;, &quot;Surly Brewing&quot;, &quot;Boom Island Park&quot;, &quot;Midtown Global Market&quot;, &quot;Washington Ave Bridge&quot; ), long = c( -93.1712321, -93.2534, -93.3062, -93.208633, -93.2687, -93.26054, -93.2393 ), lat = c( 44.9378965, 44.9807, 44.9222, 44.973301, 44.992, 44.948780, 44.9731 ) ) leaflet(data = favorite_msp) %&gt;% # base plot addTiles() %&gt;% # base map - default is openstreet map addMarkers() # Adds markers - knows lat and long from names in data The graph below is the same as above, but the code explicitly specifies latitude and longitude, which you would need to do if those variables had a name not recognized by the function, and adds labels. WARNING: DO NOT FORGET THE ~ BEFORE THE VARIABLE NAMES!!! leaflet(data = favorite_msp) %&gt;% addTiles() %&gt;% addMarkers( lng = ~long, lat = ~lat, label = ~place ) We can change just about everything about our map. The plot below is the same plot as above with some aesthetic changes: We changed the base map with addProviderTiles(). To see all available provider base maps, type providers in the console. To access those maps, use providers$PROVIDERNAME inside the addProviderTiles() function, where PROVIDERNAME is one of those listed providers. When you type provider$ a list should show up that you can click on. We changed the marker type by using addCircles() instead of addMarkers() - Search addControl in the Help or type ?addControl into the console to see what all the arguments mean and how you can change them. All variable arguments are preceded with a tilde, ~. The weight argument tells it how thick to make the lines or points, pixels. The opacity argument is the transparency, like the alpha argument in ggplot2. Colors need to be in “hex” form. We used the col2hex() function from the gplots library to do that. The colors also need to be valid R colors. leaflet(data = favorite_msp) %&gt;% addProviderTiles(providers$Stamen.Watercolor) %&gt;% addCircles( lng = ~long, lat = ~lat, label = ~place, weight = 10, opacity = 1, color = col2hex(&quot;darkblue&quot;) ) The map below is also the “same” as the ones above, but with a new base map and a line to trace a route, which was created with the addPolylines() layer. It traces the locations in the order they are entered in the dataset. leaflet(data = favorite_msp) %&gt;% addProviderTiles(providers$CartoDB.DarkMatter) %&gt;% addCircles( lng = ~long, lat = ~lat, label = ~place, weight = 10, opacity = 1, color = col2hex(&quot;darkred&quot;) ) %&gt;% addPolylines( lng = ~long, lat = ~lat, color = col2hex(&quot;darkred&quot;) ) Choropleth Layers with addPolygons() For making maps with borders (like choropleth maps), the functions can receive the base maps with spatial data a few different ways. In the example here, we use functions from the sf package to get the data in the right form. In the demo video listed under Resources below, a data.frame is translated to an sf object. Hopefully those two sets of instructions fit most of the cases you are interested in. In the code chunk below, the function st_read() downloads the shape file for the counties of North Carolina, which is included in the sf package. # North Carolina births and sids deaths nc &lt;- st_read(system.file(&quot;shape/nc.shp&quot;, package = &quot;sf&quot;), quiet = TRUE ) %&gt;% mutate(sid_per_1000birth_79 = SID79 / BIR79 * 1000) # Compute centroid (center) of each county county_centroid_lat_long &lt;- as_tibble(st_coordinates(st_centroid(nc))) %&gt;% rename( centr_long = X, centr_lat = Y ) # County names and sid_per_1000birth_79 nc_centroid_county &lt;- st_drop_geometry(nc) %&gt;% select(NAME, sid_per_1000birth_79) # All centroid level info nc_centroid &lt;- county_centroid_lat_long %&gt;% bind_cols(nc_centroid_county) The dataset has number of births and number of SIDS cases in each county of North Carolina from 1974-1979 and 1979-1984. We computed a variable called sid_per_1000birth_79 which is the number of SIDS cases per 1000 births in 1979. Below, the the NAMES and geometry variables from the first five rows of the data are printed out. The geometry variable contains information about how to plot the boundaries of the counties. Open the dataset and examine the geometry variable. The leaflet function knows that the geometry variable contains this special information. nc %&gt;% select(NAME, geometry) %&gt;% slice(1:5) ## Simple feature collection with 5 features and 1 field ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -81.74107 ymin: 36.07282 xmax: -75.77316 ymax: 36.58965 ## Geodetic CRS: NAD27 ## NAME geometry ## 1 Ashe MULTIPOLYGON (((-81.47276 3... ## 2 Alleghany MULTIPOLYGON (((-81.23989 3... ## 3 Surry MULTIPOLYGON (((-80.45634 3... ## 4 Currituck MULTIPOLYGON (((-76.00897 3... ## 5 Northampton MULTIPOLYGON (((-77.21767 3... To learn more about the data type nc into the Help menu or ?nc into the console. This plot puts the map with North Carolina county borders on top of the Open Street Map. This map isn’t that interesting by itself. leaflet(nc) %&gt;% addTiles() %&gt;% addPolygons() Now, let’s use some of the data to enhance the graph by creating a choropleth map where we color the counties by sid_per_1000birth_79. In ggplot(), we can map a variable to color or fill inside the aesthetic, but in the leaflet functions we cannot do this. Instead, we need to create a variable of hex color names that tells it how to color or fill. Thankfully, there are functions that help us do that! Let’s walk through the detail of how we created the graph below. # creates a function that can be used to map a variable to # the color palette using viridis pal &lt;- colorNumeric(&quot;viridis&quot;, domain = nc$sid_per_1000birth_79 ) leaflet(nc) %&gt;% addTiles() %&gt;% addPolygons( fillColor = ~ pal(sid_per_1000birth_79), # fills according to that variable fillOpacity = 0.7 ) # like alpha in ggplot The colorNumeric() function returns a function that maps a variable’s values to colors in the given palette, in this case “viridis”. So, pal() is a function. We can then use that function inside addPolygons(). If we apply the function to the sid_per_1000birth_79 variable, it returns a variable of hex colors and the variable of colors is used to fill the counties. Below we print out what happens when pal() is applied to sid_per_1000birth_79. We can see that it returns hex colors. So, the variable in the fillColor argument inside addPolygons() above, is a variable of hex color names. head(pal(nc$sid_per_1000birth_79)) ## [1] &quot;#440154&quot; &quot;#C0DF25&quot; &quot;#38588C&quot; &quot;#2A778E&quot; &quot;#34618D&quot; &quot;#26828E&quot; Again, this is different from ggplot(), where we could map a variable to color or fill and it would do the translating of variable to color scale for us. In the leaflet functions, we have to explicitly provide the colors in a variable. The colorNumeric() command helps you do that. colorBin(), colorQuantile(), and colorFactor() are other functions you might need to use depending on the type of variable you are trying to map to colors. There are many options in leaflet that can be customized, much like ggplot(). Here is a commented set of code to point out some useful functions and arguments: # creates a function that can be used to map a variable to # the color palette using viridis pal &lt;- colorNumeric(&quot;viridis&quot;, domain = nc$sid_per_1000birth_79 ) leaflet(nc) %&gt;% addTiles() %&gt;% addPolygons( # skips drawing the borders: stroke = FALSE, # fills according to variable of hex colors: fillColor = ~ pal(sid_per_1000birth_79), # changes transparency, like alpha in ggplot fillOpacity = 0.7, # how much to simplify the plot when zooming: smoothFactor = 0.5, # changes what happens to the shape when we mouse over it highlight = highlightOptions( weight = 5, color = &quot;black&quot;, fillOpacity = 0.9, bringToFront = FALSE ) ) %&gt;% addCircles( data = nc_centroid, lng = ~centr_long, lat = ~centr_lat, # label that appears when you click on the marker, # in this case county name and sid_per_1000birth_79 # rounded to the 2nd decimal popup = ~ paste(NAME, &quot;: &quot;, round(sid_per_1000birth_79, 2), sep = &quot;&quot; ), radius = 2 ) %&gt;% # Add a legend addLegend( pal = pal, values = ~sid_per_1000birth_79, opacity = 0.5, title = &#39;SID Rate (per 1000) in 1979&#39;, position = &quot;bottomright&quot; ) Resources Prof. Lendway’s introductory video Prof. Lendway’s demo video Detailed leaflet documenation (with examples) leaflet cheat sheet Provider map previews Tutorial by Andrew Ba Tran, investigative data reporter at Washington Post For more advanced work with spatial mapping, GIS in R, etc. see the sf package. Assignment 4: due Wednesday, February 15th @ 11:59pm Exercise 6.2 In this exercise, you are going to create a single map of some of your favorite places! The end result will be one map. IMPORTANT: Please submit this as a knitted html, not pdf! Create a data set using the tibble() function that has 10-15 rows of your favorite places. The columns will be the name of the location, the latitude, the longitude, and a column that indicates if it is in your top 3 favorite locations or not. For an example of how to use tibble(), look at the favorite_msp that is created manually above. Create a map that uses circles to indicate your favorite places. Label them with the name of the place. Choose the base map you like best. Color your 3 favorite places differently than the ones that are not in your top 3. Add a legend that explains what the colors mean. Tell me about at least one of your favorite places. Why is it one of your favorite places (why is it special/important/fun to you)? Appendix: R Functions Mapping Points Functions Function/Operator Action Example ggmap() Create a plotting canvas with a map background ggmap(world) + geom_point(...) get_stamenmap(bbox,maptype,zoom) Fetches a stamen map as background get_stamenmap(bbox = c(left = -180, bottom = -57, right = 179, top = 82.1), maptype = \"terrain\", zoom = 2) ggthemes::theme_map() Clean plotting themes for maps ggmap(world) + geom_point(...) + theme_map() Contour/Density Mapping Functions Function/Operator Action Example geom_density_2d Plots contour maps (2d density) ggmap(world) + geom_density_2d(data,aes(x,y)) stat_density_2d Plots a filled in contour heat map ggmap(world) + state_density_2d(data,aes(x,y,fill = stat(level)),geom='polygon') scale_fill_gradient(low,high) Change fill gradient scale based on a low and high color ggmap(world) + geom_point(...) + scale_fill_gradient(low='darkblue',high='red') Choropleths Mapping Functions Function/Operator Action Example map_data() Get map region boundaries from maps package into a dataframe for plotting with ggplot2 state_map &lt;- map_data('state') geom_map() Links map regions with data set with info about regions and plots it ggplot(starbucks_us_by_state) + geom_map(map = states_map,aes(map_id = state_name,fill = n)) expand_limits(x,y) Ensure limits include data values in x and y + expand_limits(x = states_map$long, y = states_map$lat) Dynamic Mapping Functions Function/Operator Action Example leaflet(data) Create base dynamic plot leaflet(data = favorite_msp) addTiles() Adds the base map - default is openstreet map + addTiles() addProviderTiles() Adds the alternative base maps + addProviderTiles(providers$Stamen.Watercolor) addMarkers(lng,lat,label) Add marker glyphs to dynamic map + addMarkers(lng= ~long, lat= ~lat, label=~place) addCircles(lng,lat,label,weight,opactiy,color) Add circle glyphs to dynamic map + addCircles(lng= ~long, lat= ~lat, label=~place, weight=10,opacity=1,color = col2hex('darkblue')) addPolylines(lng,lat) Add lines that connect locations to dynamic map + addPolylines(lng= ~long, lat= ~lat, color = col2hex('darkred')) addPolygons(fillColor,fillOpacity) Add polygons to dynamic map (if data is sf class) + addPolygons() "],["six-main-verbs.html", "Topic 7 Six Main Verbs Learning Goals Data Wrangling Introduction Practice Part 1: Baby Names Assignment 5 (Part 1): due Friday, Feb 24 @ 11:59pm Appendix: R Functions", " Topic 7 Six Main Verbs Learning Goals Understand and be able to use the following verbs appropriate: select, mutate, filter, arrange, summarize, group_by Develop working knowledge of working with dates and lubridate functions You can download a template .Rmd of this activity here. Add it to a folder called Assignment_05 in your COMP_STAT_112 folder. Data Wrangling Introduction Example: US Births The number of daily births in the US varies over the year and from day to day. What’s surprising to many people is that the variation from one day to the next can be huge: some days have only about 80% as many births as others. Why? In this activity we’ll use basic data wrangling skills to understand some drivers of daily births. The data table Birthdays in the mosaicData package gives the number of births recorded on each day of the year in each state from 1969 to 1988.3 Table 7.1: A subset of the initial birthday data. state date year births AK 1969-01-01 1969 14 AL 1969-01-01 1969 174 AR 1969-01-01 1969 78 AZ 1969-01-01 1969 84 CA 1969-01-01 1969 824 CO 1969-01-01 1969 100 Tidy Data Additional reading: Wickham, Tidy Data Wickham and Grolemund, Tidy Data Baumer, Kaplan, and Horton, Tidy Data There are different ways to store and represent the same data. In order to be consistent and to also take advantage of the vectorized nature of R, the tidyverse packages we’ll use provide a set of three interrelated rules/conventions for a dataset to be tidy: Each variable must have its own column. Each observation must have its own row. Each value must have its own cell. One of the first things we’ll often do when acquiring new data is to “tidy it” into this form. For now, we can already start thinking of a data frame (tibble) as a table whose rows are the individual cases and whose columns are the variables on which we have information for each individual case. The first figure from the tidyr cheat sheet summarizes this principle. Data Verbs Additional reading: Wickham and Grolemund, Data Transformation Baumer, Kaplan, and Horton, A Grammar for Data Wrangling There are six main data transformation verbs in the dplyr library. Each verb takes an input data frame along with additional arguments specifying the action, and returns a new data frame. We’ll examine them in three pairs. Verbs that change the variables (columns) but not the cases (rows) The first two verbs change which variables (columns) are included in the data frame, but preserve the same set of cases (rows). select() chooses which columns to keep, or put another way, deletes those colummns that are not selected. To specify the columns, we can either list them out, or use functions like starts_with(), ends_with(), or contains() to specify the titles of the variables we wish to keep. mutate() adds one or more columns to the data frame. Each column is a function of the other columns that is applied on a row by row basis. For example, we can use arithmetic operations like adding two other variables or logical operations like checking if two columns are equal, or equal to a target number. Example 7.1 (select and mutate) Consider the Birthdays data Add two new variables to the Birthdays data: one that has only the last two digits of the year, and one that states whether there were more than 100 births in the given state on the given date. Then form a new table that only has three columns: the state and your two new columns. What does the following operation return: select(Birthdays, ends_with(\"te\"))? Solution The commands for the first two parts are BirthdaysExtra &lt;- mutate(Birthdays, year_short = year - 1900, busy_birthday = (births &gt; 100) ) BirthdaysExtraTable &lt;- select( BirthdaysExtra, state, year_short, busy_birthday ) select(Birthdays, ends_with(&quot;te&quot;)) %&gt;% head() ## state date ## 1 AK 1969-01-01 ## 2 AL 1969-01-01 ## 3 AR 1969-01-01 ## 4 AZ 1969-01-01 ## 5 CA 1969-01-01 ## 6 CO 1969-01-01 The operation in (c) selects only the first two columns state and date because they end in ‘te’. Verbs that change the cases (rows) but not the variables (columns) The next two verbs change which cases (rows) are included in the data frame, but preserve the same set of variables (columns). filter() deletes some of the rows by specifying which rows to keep. arrange() reorders the rows according to a specified criteria. To sort in reverse order based on the variable x, use arrange(desc(x)). Example 7.2 (filter and arrange) Create a table with only births in Massachusetts in 1979, and sort the days from those with the most births to those with the fewest. Solution We want to filter and then arrange: MABirths1979 &lt;- filter(Birthdays, state == &quot;MA&quot;, year == 1979) MABirths1979Sorted &lt;- arrange(MABirths1979, desc(births)) Table 7.2: Birthdays in Massachusetts in 1979, sorted from those dates with the most births to those dates with the fewest births. state date year births MA 1979-09-28 1979 262 MA 1979-09-11 1979 252 MA 1979-12-28 1979 249 MA 1979-09-26 1979 246 MA 1979-07-24 1979 245 MA 1979-04-27 1979 243 When filtering, we often use logical comparison operators like ==, &gt;, &lt;, &gt;= (greater than or equal to), &lt;= (less than or equal to), and %in%, which compares the value to a list of entries.4 For example, if we want all births in AK, CA, and MA, we can write filter(Birthdays, state %in% c(&quot;AK&quot;,&quot;CA&quot;,&quot;MA&quot;)) The c() here is for concatenate, which is how we form vectors in R. Grouped summaries summarize() (or equivalently summarise()) takes an entire data frame as input and outputs a single row with one or more summary statistics, such as mean(), sum(), sd(), n_distinct(), or n() (which just counts the number of entries/rows). summarize(Birthdays, total_births = sum(births), average_births = mean(births), nstates = n_distinct(state), ncases = n() ) ## total_births average_births nstates ncases ## 1 70486538 189.0409 51 372864 So summarize changes both the cases and the variables. Alone, summarize is not all that useful, because we can also access individual variables directly with the dollar sign. For example, to find the total and average births, we can write sum(Birthdays$births) ## [1] 70486538 mean(Birthdays$births) ## [1] 189.0409 Rather, we will mostly use it to create grouped summaries, which brings us to the last of the six main data verbs. group_by() groups the cases of a data frame by a specified set of variables. The size of the stored data frame does not actually change (neither the cases nor the variables change), but then other functions can be applied to the specified groups instead of the entire data set. We’ll often use group_by in conjunction with summarize to get a grouped summary. Example 7.3 (grouped summary) Consider the Birthdays data again. Find the average number of daily births (per state) in each year. Find the average number of daily births in each year, by state. Solution We have to first group by the desired grouping and then perform a summarize. BirthdaysYear &lt;- group_by(Birthdays, year) summarize(BirthdaysYear, average = mean(births)) ## # A tibble: 20 × 2 ## year average ## &lt;int&gt; &lt;dbl&gt; ## 1 1969 192. ## 2 1970 200. ## 3 1971 191. ## 4 1972 175. ## 5 1973 169. ## 6 1974 170. ## 7 1975 169. ## 8 1976 170. ## 9 1977 179. ## 10 1978 179. ## 11 1979 188. ## 12 1980 194. ## 13 1981 195. ## 14 1982 198. ## 15 1983 196. ## 16 1984 197. ## 17 1985 202. ## 18 1986 202. ## 19 1987 205. ## 20 1988 210. BirthdaysYearState &lt;- group_by(Birthdays, year, state) summarize(BirthdaysYearState, average = mean(births)) ## # A tibble: 1,020 × 3 ## # Groups: year [20] ## year state average ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1969 AK 18.6 ## 2 1969 AL 174. ## 3 1969 AR 91.3 ## 4 1969 AZ 93.3 ## 5 1969 CA 954. ## 6 1969 CO 110. ## 7 1969 CT 134. ## 8 1969 DC 75.3 ## 9 1969 DE 27.6 ## 10 1969 FL 292. ## # … with 1,010 more rows Piping Additional reading: Wickham and Grolemund, Combining Multiple Operations with the Pipe Wickham and Grolemund, Pipes Pipes offer an efficient way to execute multiple operations at once. Here is a more efficient way to redo Exercise 7.2 with the pipe: QuickMABirths1979 &lt;- Birthdays %&gt;% filter(state == &quot;MA&quot;, year == 1979) %&gt;% arrange(desc(births)) With the pipe notation, x %&gt;% f(y) becomes f(x,y), where in the first line here, x is Birthdays, the function f is filter, and y is state == \"MA\", year == 1979. The really nice thing about piping is that you can chain together a bunch of different operations without having to save the intermediate results. This is what we have done above by chaining together a filter followed by an arrange. Manipulating Dates Additional reading: Wickham and Grolemund, Date and Times with lubridate The date variable in Birthdays prints out in the conventional, human-readable way. But it is actually in a format (called POSIX date format) that automatically respects the order of time. The lubridate package contains helpful functions that will extract various information about any date. Here are some you might find useful: year() month() week() yday() — gives the day of the year as a number 1-366. This is often called the “Julian day.” mday() — gives the day of the month as a number 1-31 wday() — gives the weekday (e.g. Monday, Tuesday, …). Use the optional argument label = TRUE to have the weekday spelled out rather than given as a number 1-7. Using these lubridate functions, you can easily look at the data in more detail. For example, we can add columns to the date table for month and day of the week:5 Birthdays &lt;- Birthdays %&gt;% mutate( month = month(date, label = TRUE), weekday = wday(date, label = TRUE) ) Here is what the data table looks like with our new columns: Table 7.3: A subset of the birthday data with additional variables. state date year births month weekday AK 1969-01-01 1969 14 Jan Wed AL 1969-01-01 1969 174 Jan Wed AR 1969-01-01 1969 78 Jan Wed AZ 1969-01-01 1969 84 Jan Wed CA 1969-01-01 1969 824 Jan Wed CO 1969-01-01 1969 100 Jan Wed Example 7.4 Make a table showing the five states with the most births between September 9, 1979 and September 11, 1979, inclusive. Arrange the table in descending order of births. Solution The plan of attack is to first filter the dates, then group by state, then use a summarize to add up totals for each state, and finally arrange them in descending order to find the top 5.6 SepTable &lt;- Birthdays %&gt;% filter(date &gt;= ymd(&quot;1979-09-09&quot;), date &lt;= ymd(&quot;1979-09-11&quot;)) %&gt;% group_by(state) %&gt;% summarize(total = sum(births)) %&gt;% arrange(desc(total)) %&gt;% head(n = 5) knitr::kable( SepTable[, ], caption = &quot;States with the most births between September 9, 1979 and September 11, 1979, inclusive.&quot; ) Table 7.4: States with the most births between September 9, 1979 and September 11, 1979, inclusive. state total CA 3246 TX 2347 NY 1943 IL 1673 OH 1408 Practice Part 1: Baby Names We are going to practice the six data verbs on the babynames dataset: Table 7.5: A subset of the babynames data, which runs from 1880-2015 and is provided by the US Social Security Administration. year sex name n prop 1880 F Mary 7065 0.0723836 1880 F Anna 2604 0.0266790 1880 F Emma 2003 0.0205215 1880 F Elizabeth 1939 0.0198658 1880 F Minnie 1746 0.0178884 1880 F Margaret 1578 0.0161672 Exercise 7.1 Add a new boolean (true or false) variable called has2000 that indicates whether there were more than 2000 babies of that sex assigned at birth with that name in each year. Display the first six rows of your new table. Exercise 7.2 Find the number of total babies per year, sorted by most babies to least babies. Exercise 7.3 Find the twelve most popular names overall (i.e., totaled over all year and sexes), ordered by popularity. Exercise 7.4 Find the most popular names for males, over all years and ordered by popularity. Exercise 7.5 Find the most popular names for females, over all years and ordered by popularity. Exercise 7.6 Calculate the number of babies born each decade, and arrange them in descending order. Calculating the decade may be the trickiest part of this question! Exercise 7.7 Calculate the most popular name for each year. Print out the answer for the years 2006-2015. This is tricky, but try Googling for hints. Assignment 5 (Part 1): due Friday, Feb 24 @ 11:59pm Now we are ready to return to the Birthdays data set to investigate some drivers of daily births in the US. Seasonality For this activity, we need to work with data aggregated across the states. Exercise 7.8 (Total Across States) Create a new data table, DailyBirths, that adds up all the births for each day across all the states. Plot out daily births vs date. For all of the remaining exercises, start with your DailyBirths data frame. Exercise 7.9 (Examine Seasonality) To examine seasonality in birth rates, look at the daily number of births by week of the year (1-53) month of the year (January to December) Julian day (1-366) When are the most babies born? The fewest? Day of the Week Exercise 7.10 (Examine Patterns within the Week) To examine patterns within the week, make a box plot showing the daily number of births by day of the week. Interpret your results. Holidays Exercise 7.11 (Two Year Sample) Pick a two-year span of the Birthdays that falls in the 1980s, say, 1980/1981. Extract out the data just in this interval, calling it MyTwoYears. (Hint: filter(), year()). Plot out the births in this two-year span day by day. Color each date according to its day of the week. Explain the pattern that you see. The plot you generate for Exercise 7.11 should be generally consistent with the weekend effect and seasonal patterns we have already seen; however, a few days each year stand out as exceptions. We are going to examine the hypothesis that these are holidays. You can find a data set listing US federal holidays here. Read it in as follows:7 Holidays &lt;- read_csv(&quot;https://jamesnormington.github.io/112_spring_2023/data/US-Holidays.csv&quot;) %&gt;% mutate(date = lubridate::dmy(date)) Exercise 7.12 (Holidays) Now we will update the plot from Exercise 7.11 to include the holidays. Add a variable to MyTwoYears called is_holiday. It should be TRUE when the day is a holiday, and FALSE otherwise. One way to do this is with the transformation verb %in%, for instance, is_holiday = date %in% Holidays$date. Add a geom_point layer to your plot that sets the color of the points based on the day of the week and the shape of the points based on whether or not the day is a holiday. Finally, some holidays seem to have more of an effect than others. It would be helpful to label them. Use geom_text with the holiday data to add labels to each of the holidays. Hints: 1. Start by making a new data table called MyHolidays that just contains the holidays in your selected two year window. 2. Start your geometry line with geom_text(data=MyHolidays). 3. You will have to make up a y-coordinate for each label (see hint 1). 4. You can set the orientation of each label with the angle argument; e.g., geom_text(data=MyHolidays, angle=40, ...). Hints: 1.To add the y-values in the MyHolidays, run the following code chunk: MyTwoYears_holidays = MyTwoYears %&gt;% filter(is_holiday) MyHolidays = Holidays %&gt;% filter(year %in% c(____, _____)) %&gt;% mutate(total = MyTwoYears_holidays$total) To add labels to the graph: + geom_text(data = MyHolidays, aes(x = date, y = total, label = holiday), size = 2.5, angle = 40) Geography In any way you choose, explore the effect of geography on birth patterns using the original Birthdays data. For example, do parents in Minnesota have fewer winter babies than in other states? Which states have the largest increases or decreases in their portion of US births over time? Is the weekend effect less strong for states with a higher percentage of their populations living in rural areas? If you have extra time or want some extra practice, pick any issue (not all of these) that interests you, explore it, and create a graphic to illustrate your findings. Superstition This article from FiveThirtyEight demonstrates that fewer babies are born on the 13th of each month, and the effect is even stronger when the 13th falls on a Friday. If you have extra time or want some extra practice, you can try to recreate the first graphic in the article. Appendix: R Functions Six Main Verbs Function/Operator Action Example select() Provides a subset of variables select(Birthdays, state, date, year, births) mutate() Creates a new variable mutate(Birthdays, year_short = year - 1900) filter() Provides a subset of rows filter(Birthdays, state %in% c(\"AK\",\"CA\",\"MA\")) arrange() Sorts the rows of a dataset arrange(Birthdays, desc(births)) summarize() Collapses rows into summaries of variables across rows summarize(Birthdays,total_births = sum(births), average_births = mean(births), nstates = n_distinct(state), ncases = n()) group_by() Collapses rows into summaries of variables across rows group_by(Birthdays, year, state) %&gt;% summarize(average = mean(births)) Logical/Boolean Operators Function/Operator Action Example == Checks whether two items are equal year == 2000 &gt; Checks whether left is greater than the right year &gt; 2000 &lt; Checks whether left is less than the right year &lt; 2000 &gt;= Checks whether left is greater than or equal to right year &gt;= 2000 &lt;= Checks whether left is less than or equal to right year &lt;= 2000 != Checks whether left is not equal to right year != 2000 %in% Checks whether left is in vector on right state %in% c(\"AK\",\"CA\",\"MA\") The fivethirtyeight package has more recent data.↩︎ Important note about = vs. ==: A single = is an assignment operator that assigns the value after the equal sign to the variable before the equal sign. We saw an example of this above with year_short = year - 1900. In order to compare whether two values are the same, we need to use the double equal == as in year == 1979.↩︎ The label = TRUE argument tells month to return a string abbreviation for the month instead of the month’s number.↩︎ The verbs head(n = 5), tail(n = 3) are often used just after an arrange to keep, e.g., only the first 5 entries or last 3 entries, where n specifies the number of entries to keep.↩︎ The point of the lubridate::dmy() function is to convert the character-string date stored in the CSV to a POSIX date-number.↩︎ "],["reshaping-data.html", "Topic 8 Reshaping Data Learning Goals Wide and Long Data Formats Example: The Daily Show Guests Assignment 5 (Part 2): due Friday, Feb 24 @ 11:59pm Appendix: R Functions", " Topic 8 Reshaping Data Learning Goals Understand the difference between wide and long data format and distinguish the case (unit of observation) for a given data set Develop comfort in using pivot_wider and pivot_longer in the tidyr package You can download a template .Rmd of this activity here. Put the file in the existing folder Assignment_04 in your COMP_STAT_112 folder. Wide and Long Data Formats Additional reading: Wickham and Grolemund on pivoting, or Baumer, Kaplan, and Horton on reshaping data As we are transforming data, it is important to keep in mind what constitutes each case (row) of the data. For example, in the initial babynames data below, each case is a single name-sex-year combination. So if we have the same name and sex assigned at birth but a different year, that would be a different case. Table 8.1: Each case is one name-sex-year combination. year sex name n prop 1880 F Mary 7065 0.0723836 1880 F Anna 2604 0.0266790 1880 F Emma 2003 0.0205215 1880 F Elizabeth 1939 0.0198658 1880 F Minnie 1746 0.0178884 1880 F Margaret 1578 0.0161672 It is often necessary to rearrange your data in order to create visualizations, run statistical analysis, etc. We have already seen some ways to rearrange the data to change the unit of observation (also known as case). For example, what is the case after performing the following command? babynamesTotal &lt;- babynames %&gt;% group_by(name, sex) %&gt;% summarise(total = sum(n)) Each case now represents one name-sex combination: Table 8.2: Long format where each case is one name-sex combination. name sex total Aaban M 107 Aabha F 35 Aabid M 10 Aabir M 5 Aabriella F 32 Aada F 5 In this activity, we are going to learn two new operations to reshape and reorganize the data: pivot_wider() and pivot_longer(). Wider Example 8.1 We want to find the common names that are the most gender neutral (used roughly equally for males and females). How should we rearrange the data? Well, one nice way would be to have a single row for each name, and then have separate variables for the number of times that name is used for males and females. Using these two columns, we can then compute a third column that gives the ratio between these two columns. That is, we’d like to transform the data into a wide format with each of the possible values of the sex variable becoming its own column. The operation we need to perform this transformation is pivot_wider(). The inputs for this function are: values_from (total in this case) representing the variable to be divided into multiple new variables, names_from (the original variable sex in this case) that identifies the variable in the initial long format data whose values should become the names of the new variables in the wide format data. values_fill = 0 specifies that if there are, e.g., no females named Aadam, we should include a zero in the corresponding entry of the wide format table names_sort = TRUE dictates that the variables are listed in alphabetical order; when it is FALSE, they are listed in order of first appearance. Figure 8.1: Illustration of pivot_wider from tidyr cheatsheet. BabyWide &lt;- babynamesTotal %&gt;% pivot_wider(names_from = sex, values_from = total, values_fill = 0, names_sort = TRUE) Table 8.3: A wide format with one case per name enables us to examine gender balance. name F M Aaban 0 107 Aabha 35 0 Aabid 0 10 Aabir 0 5 Aabriella 32 0 Aada 5 0 Now we can choose common names with frequency greater than 25,000 for both males and females, and sort by the ratio to identify gender-neutral names. Neutral &lt;- BabyWide %&gt;% filter(M &gt; 25000, F &gt; 25000) %&gt;% mutate(ratio = pmin(M / F, F / M)) %&gt;% #pmin() stands for parallel min, finds the min(M/F, F/M) within each row arrange(desc(ratio)) Table 8.4: The most gender-neutral common names, in wide format. name F M ratio Kerry 48534 49596 0.9785870 Riley 100881 92789 0.9197867 Quinn 28283 31230 0.9056356 Jackie 90604 78405 0.8653591 Frankie 33236 40552 0.8195897 Jaime 49673 67582 0.7350034 Casey 76020 110165 0.6900558 Peyton 69256 47682 0.6884891 Pat 40123 26731 0.6662264 Jessie 167010 110027 0.6588049 Kendall 58026 33821 0.5828594 Jody 55691 31206 0.5603419 Longer Next, let’s filter these names to keep only those with a ratio of 0.5 or greater (no more than 2 to 1), and then switch back to long format. We can do this with the following pivot_longer() operation. It gathers the columns listed c(F,M) under the cols argument into a single column whose name is given by the names_to argument (“sex”), and includes the values in a column called total, which is the input to the values_to argument. Figure 8.2: Illustration of pivot_longer from tidyr cheatsheet. NeutralLong &lt;- Neutral %&gt;% filter(ratio &gt;= .5) %&gt;% pivot_longer(cols = c(`F`, `M`), names_to = &quot;sex&quot;, values_to = &quot;total&quot;) %&gt;% select(name, sex, total) %&gt;% arrange(name) Table 8.5: Long format for the most gender-neutral common names. name sex total Casey F 76020 Casey M 110165 Frankie F 33236 Frankie M 40552 Jackie F 90604 Jackie M 78405 Jaime F 49673 Jaime M 67582 Jessie F 167010 Jessie M 110027 Jody F 55691 Jody M 31206 Kendall F 58026 Kendall M 33821 Kerry F 48534 Kerry M 49596 Pat F 40123 Pat M 26731 Peyton F 69256 Peyton M 47682 Quinn F 28283 Quinn M 31230 Riley F 100881 Riley M 92789 Example: The Daily Show Guests The data associated with this article is available in the fivethirtyeight package, and is loaded into Daily below. It includes a list of every guest to ever appear on Jon Stewart’s The Daily Show. Note that when multiple people appeared together, each person receives their own line. Daily &lt;- daily_show_guests year google_knowledge_occupation show group raw_guest_list 1999 singer 1999-07-26 Musician Donny Osmond 1999 actress 1999-07-27 Acting Wendie Malick 1999 vocalist 1999-07-28 Musician Vince Neil 1999 film actress 1999-07-29 Acting Janeane Garofalo 1999 comedian 1999-08-10 Comedy Dom Irrera 1999 actor 1999-08-11 Acting Pierce Brosnan 1999 director 1999-08-12 Media Eduardo Sanchez and Daniel Myrick 1999 film director 1999-08-12 Media Eduardo Sanchez and Daniel Myrick 1999 american television personality 1999-08-16 Media Carson Daly 1999 actress 1999-08-17 Acting Molly Ringwald 1999 actress 1999-08-18 Acting Sarah Jessica Parker Assignment 5 (Part 2): due Friday, Feb 24 @ 11:59pm Exercise 8.1 Create the following table containing 19 columns. The first column should have the ten guests with the highest number of total apperances on the show, listed in descending order of number of appearances. The next 17 columns should show the number of appearances of the corresponding guest in each year from 1999 to 2015 (one per column). The final column should show the total number of appearances for the corresponding guest over the entire duration of the show (these entries should be in decreasing order). Sketch of solution: Select two columns: the guest name and the year of appearance. Create a new column called one with all entries exactly equal to 1. Pivot wider so that each year is its own column. Use the following extra arguments to make sure each entry is only counted once, and no appearances in a year is counted as 0: values_fn = list(one = length) and values_fill = 0 Create a new column called totalApps, with the values equal to rowSums(across(where(is.numeric))) Sort by total appearances, so that the most appearances is at the top. Use slice() to get the top 10 rows. The original data has 18 different entries for the group variable: unique(Daily$group) ## [1] &quot;Acting&quot; &quot;Comedy&quot; &quot;Musician&quot; &quot;Media&quot; ## [5] NA &quot;Politician&quot; &quot;Athletics&quot; &quot;Business&quot; ## [9] &quot;Advocacy&quot; &quot;Political Aide&quot; &quot;Misc&quot; &quot;Academic&quot; ## [13] &quot;Government&quot; &quot;media&quot; &quot;Clergy&quot; &quot;Science&quot; ## [17] &quot;Consultant&quot; &quot;Military&quot; In order to help you recreate the first figure from the article, I have added a new variable with three broader groups: (i) entertainment; (ii) politics, business, and government, and (iii) commentators. The data is available here. We will learn in the next activity what the inner_join in this code chunk is doing. DailyGroups &lt;- read_csv(&quot;https://jamesnormington.github.io/112_spring_2023/data/daily-group-assignment.csv&quot;) Daily &lt;- Daily %&gt;% inner_join(DailyGroups, by = c(&quot;group&quot; = &quot;group&quot;)) year google_knowledge_occupation show group raw_guest_list broad_group 1999 actor 1999-01-11 Acting Michael J. Fox Entertainment 1999 comedian 1999-01-12 Comedy Sandra Bernhard Entertainment 1999 television actress 1999-01-13 Acting Tracey Ullman Entertainment 1999 film actress 1999-01-14 Acting Gillian Anderson Entertainment 1999 actor 1999-01-18 Acting David Alan Grier Entertainment 1999 actor 1999-01-19 Acting William Baldwin Entertainment Exercise 8.2 Using the group assignments contained in the broad_group variable, recreate the graphic from the article, with three different lines showing the fraction of guests in each group over time. Hint: first think about what your case should be for the glyph-ready form. Sketch of solution: Define groups by year and broad group. Collapse the rows by year and broad group, creating a variable n which counts the number of each year + broad group combination. Define groups by year. Collapse the rows by year. Retain the broad_group variable as is (use broad_group = broad_group). Create a new variable called pct which is the percentage, within a given year, of broad_groups. If this step is done correctly, 1999 should have 92.0% Entertainment, 6.7% Commentators, and 1.2% Politics, Business, and Government Use ggplot for the rest! A typical situation that requires a pivot_longer command is when the columns represent the possible values of a variable. Table 8.6 shows example data set from opendataforafrica.org with different years in different columns. You can find the data here. Lesotho &lt;- read_csv(&quot;https://jamesnormington.github.io/112_spring_2023/data/Lesotho.csv&quot;) Table 8.6: Financial statistics about Lesotho. Category 2010 2011 2012 2013 2014 Total Population 2.01 2.03 2.05 2.07 2.10 Gross Domestic Product 2242.30 2560.99 2494.60 2267.96 1929.28 Average Interest Rate on Loans 11.22 10.43 10.12 9.92 10.34 Inflation Rate 3.60 4.98 6.10 5.03 4.94 Average Interest Rate on Deposits 3.68 2.69 2.85 2.85 2.72 Exercise 8.3 (Practice pivoting longer) Make a side-by-side bar chart with the year on the horizontal axis, and three side-by-side vertical columns for average interest rate on deposits, average interest rate on loans, and inflation rate for each year. In order to get the data into glyph-ready form, you’ll need to use pivot_longer. Hint: pivot_longer uses the dplyr::select() notation, so you can, e.g., list the columns you want to select, use colon notation, or use starts_with(a string). See Wickham and Grolemund for more information. Appendix: R Functions Reshaping Functions Function/Operator Action Example pivot_wider() Takes a long data set and spreads information in columns into many new variables (wider) babynamesTotal %&gt;% pivot_wider(names_from = sex, values_from = total, values_fill = 0, names_sort = TRUE) pivot_longer() Takes a wide data set and gathers information in columns into fewer variables (longer) Neutral %&gt;% pivot_longer(cols = c(F,M), names_to = \"sex\", values_to = \"total\") "],["joining-two-data-frames.html", "Topic 9 Joining Two Data Frames Learning Goals Joins Assignment 6 Part 1: due Friday, March 3rd @ 11:59pm Appendix: R Functions", " Topic 9 Joining Two Data Frames Learning Goals Understand the concept of keys and variables that uniquely identify rows or cases Understand the different types of joins, different ways of combining two data frames together Develop comfort in using mutating joins: left_join, inner_join and full_join in the dplyr package Develop comfort in using filtering joins: semi_join, anti_join in the dplyr package You can download a template .Rmd of this activity here. Put it in a folder Assignment_06 in COMP_STAT_112. Joins A join is a verb that means to combine two data tables. These tables are often called the left and the right tables. There are several kinds of join. All involve establishing a correspondence — a match — between each case in the left table and zero or more cases in the right table. The various joins differ in how they handle multiple matches or missing matches. Establishing a match between cases A match between a case in the left data table and a case in the right data table is made based on the values in keys, variables that uniquely define observations in a data table. As an example, we’ll examine the following two tables on grades and courses. The Grades file has one case for each class of each student, and includes variables describing the ID of the student (sid), the ID of the session (section/class), and the grade received. The Courses file has variables for the ID of the session (section/class), the department (coded), the level, the semester, the enrollment, and the ID of the instructor (iid). We show a few random rows of each table below. Table 9.1: Student grades. sid sessionID grade S31842 session2207 B+ S32436 session3172 S S31671 session3435 A- S31929 session3512 NC Table 9.2: Information about each course section. sessionID dept level sem enroll iid session2780 O 300 SP2003 21 inst298 session3520 k 300 FA2004 16 inst463 session1965 d 100 FA2001 25 inst414 session3257 o 200 SP2004 16 inst312 Keys There are two types of keys: A primary key uniquely identifies an observation in its own table. A foreign key uniquely identifies an observation in another table. sid (student ID) and sessionID (class ID) are the primary keys for Grades as they unique identify each case. # can check to make sure that there are no combinations of sid and session ID that have more than 1 row Grades %&gt;% count(sid, sessionID) %&gt;% filter(n &gt; 1) ## # A tibble: 0 × 3 ## # … with 3 variables: sid &lt;chr&gt;, sessionID &lt;chr&gt;, n &lt;int&gt; sessionID (class ID) and dept are the primary keys for Courses as they unique identify each case. You may have thought that sessionID alone was sufficient; however, if a course is cross-listed, then it may have multiple departments listed. # check to make sure that there are no combinations # of session ID and dept that have more than 1 row Courses %&gt;% count(sessionID, dept) %&gt;% filter(n &gt; 1) ## # A tibble: 0 × 3 ## # … with 3 variables: sessionID &lt;chr&gt;, dept &lt;chr&gt;, n &lt;int&gt; Matching In order to establish a match between two data tables, You specify which variables (or keys) to use. Each variable is specify as a pair, where one variable from the left table corresponds to one variable from the right table. Cases must have exactly equal values in the left variable and right variable for a match to be made. Mutating joins The first class of joins are mutating joins, which add new variables (columns) to the left data table from matching observations in the right table.8 The main difference in the three mutating join options in this class is how they answer the following questions: What happens when a case in the right table has no matches in the left table? What happens when a case in the left table has no matches in the right table? Three mutating join functions: left_join(): the output has all cases from the left, regardless if there is a match in the right, but discards any cases in the right that do not have a match in the left. inner_join(): the output has only the cases from the left with a match in the right. full_join(): the output has all cases from the left and the right. This is less common than the first two join operators. When there are multiple matches in the right table for a particular case in the left table, all three of these mutating join operators produce a separate case in the new table for each of the matches from the right. Example 9.1 (Average class size: varying viewpoints) Determine the average class size from the viewpoint of a student and the viewpoint of the Provost / Admissions Office. Solution Provost Perspective: The Provost counts each section as one class and takes the average of all classes. We have to be a little careful and cannot simply do mean(Courses$enroll), because some sessionID appear twice on the course list. Why is that?9 We can still do this from the data we have in the Courses table, but we should aggregate by sessionID first: CourseSizes &lt;- Courses %&gt;% group_by(sessionID) %&gt;% summarise(total_enroll = sum(enroll)) mean(CourseSizes$total_enroll) ## [1] 21.45251 Student Perspective: To get the average class size from the student perspective, we can join the enrollment of the section onto each instance of a student section. Here, the left table is Grades, the right table is CourseSizes, we are going to match based on sessionID, and we want to add the variable total_enroll from CoursesSizes. We’ll use a left_join since we aren’t interested in any sections from the CourseSizes table that do not show up in the Grades table; their enrollments should be 0, and they are not actually seen by any students. Note, e.g., if there were 100 extra sections of zero enrollments on the Courses table, this would change the average from the Provost’s perspective, but not at all from the students’ perspective. If the by = is omitted from a join, then R will perform a natural join, which matches the two tables by all variables they have in common. In this case, the only variable in common is the sessionID, so we would get the same results by omitting the second argument. In general, this is not reliable unless we check ahead of time which variables the tables have in common. If two variables to match have different names in the two tables, we can write by = c(\"name1\" = \"name2\"). EnrollmentsWithClassSize &lt;- Grades %&gt;% left_join(CourseSizes, by = c(&quot;sessionID&quot; = &quot;sessionID&quot;) ) %&gt;% select(sid, sessionID, total_enroll) Table 9.3: Student enrollments with the section size. sid sessionID total_enroll S31842 session2207 11 S32436 session3172 51 S31671 session3435 15 S31929 session3512 13 AveClassEachStudent &lt;- EnrollmentsWithClassSize %&gt;% group_by(sid) %&gt;% summarise(ave_enroll = mean(total_enroll, na.rm = TRUE)) Table 9.4: Average class size seen by each individual student. sid ave_enroll S32169 34.25000 S32121 23.33333 S32472 24.53846 S31467 23.82353 The na.rm = TRUE here says that if the class size is not available for a given class, we do not count that class towards the student’s average class size. What is another way to capture the same objective? We could have used an inner_join instead of a left_join when we joined the tables to eliminate any entries from the left table that did not have a match in the right table. Now we can take the average of the AveClassEachStudent table, counting each student once, to find the average class size from the student perspective: mean(AveClassEachStudent$ave_enroll) ## [1] 24.41885 We see that the average size from the student perspective (24.4) is greater than the average size from the Provost’s perspective (21.5). Filtering joins The second class of joins are filtering joins, which select specific cases from the left table based on whether they match an observation in the right table. semi_join(): discards any cases in the left table that do not have a match in the right table. If there are multiple matches of right cases to a left case, it keeps just one copy of the left case. anti_join(): discards any cases in the left table that have a match in the right table. A particularly common employment of these joins is to use a filtered summary as a comparison to select a subset of the original cases, as follows. Example 9.2 (semi_join to compare to a filtered summary) Find a subset of the Grades data that only contains data on the four largest sections in the Courses data set. Solution LargeSections &lt;- Courses %&gt;% group_by(sessionID) %&gt;% summarise(total_enroll = sum(enroll)) %&gt;% arrange(desc(total_enroll)) %&gt;% head(4) GradesFromLargeSections &lt;- Grades %&gt;% semi_join(LargeSections) Example 9.3 (semi_join) Use semi_join() to create a table with a subset of the rows of Grades corresponding to all classes taken in department J. Solution There are multiple ways to do this. We could do a left join to the Grades table to add on the dept variable, and then filter by department, then select all variables except the additional dept variable we just added. Here is a more direct way with semi_join that does not involve adding and subtracting the extra variable: JCourses &lt;- Courses %&gt;% filter(dept == &quot;J&quot;) JGrades &lt;- Grades %&gt;% semi_join(JCourses) Let’s double check this worked. Here are the first few entries of our new table: Table 9.5: Student enrollments in Department J. sid sessionID grade S31185 session1791 A- S31185 session1792 B+ S31185 session1794 B- S31185 session1795 C+ The first entry is for session1791. Which department is that course in? What department should it be? (Courses %&gt;% filter(sessionID == &quot;session1791&quot;)) ## # A tibble: 1 × 6 ## sessionID dept level sem enroll iid ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 session1791 J 100 FA1993 22 inst223 Great, it worked! But that only checked the first one. What if we want to double check all of the courses included in Table 9.5? We can add on the department and do a group by to count the number from each department in our table. JGrades %&gt;% left_join(Courses) %&gt;% count(dept) ## # A tibble: 1 × 2 ## dept n ## &lt;chr&gt; &lt;int&gt; ## 1 J 148 Assignment 6 Part 1: due Friday, March 3rd @ 11:59pm Exercise 9.1 Use all of your wrangling skills to answer the following questions. Hint 1: start by thinking about what tables you might need to join (if any) and identifying the corresponding variables to match. Hint 2: you’ll need an extra table to convert grades to grade point averages. I’ve given you the code below. How many student enrollments in each department? What’s the grade-point average (GPA) for each student? The average student GPA? Hint: There are some “S” and “AU” grades that we want to exclude from GPA calculations. What is the correct variant of join to accomplish this? What fraction of grades are below B+? What’s the grade-point average for each instructor? We cannot actually compute the correct grade-point average for each department from the information we have. The reason why is due to cross-listed courses. Students for those courses could be enrolled under either department, and we do not know which department to assign the grade to. There are a number of possible workarounds to get an estimate. One would be to assign all grades in a section to the department of the instructor, which we’d have to infer from the data. Instead, start by creating a table with all cross-listed courses. Then use an anti_join to eliminate all cross-listed courses. Finally, use an inner_join to compute the grade-point average for each department. (GPAConversion &lt;- tibble(grade = c(&quot;A+&quot;, &quot;A&quot;, &quot;A-&quot;, &quot;B+&quot;, &quot;B&quot;, &quot;B-&quot;, &quot;C+&quot;, &quot;C&quot;, &quot;C-&quot;, &quot;D+&quot;, &quot;D&quot;, &quot;D-&quot;, &quot;NC&quot;), gp = c(4.3, 4, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0))) ## # A tibble: 13 × 2 ## grade gp ## &lt;chr&gt; &lt;dbl&gt; ## 1 A+ 4.3 ## 2 A 4 ## 3 A- 3.7 ## 4 B+ 3.3 ## 5 B 3 ## 6 B- 2.7 ## 7 C+ 2.3 ## 8 C 2 ## 9 C- 1.7 ## 10 D+ 1.3 ## 11 D 1 ## 12 D- 0.7 ## 13 NC 0 Bicycle-Use Patterns In this exercise, you’ll examine some factors that may influence the use of bicycles in a bike-renting program. The data come from Washington, DC and cover the last quarter of 2014. Figure 9.1: A typical Capital Bikeshare station. This one is at Florida and California, next to Pleasant Pops. Figure 9.2: One of the vans used to redistribute bicycles to different stations. Two data tables are available: Trips contains records of individual rentals here Stations gives the locations of the bike rental stations here Here is the code to read in the data:10 data_site &lt;- &quot;https://jamesnormington.github.io/112_spring_2023/data/2014-Q4-Trips-History-Data-Small.rds&quot; Trips &lt;- readRDS(gzcon(url(data_site))) Stations &lt;- read_csv(&quot;https://jamesnormington.github.io/112_spring_2023/data/DC-Stations.csv&quot;) The Trips data table is a random subset of 10,000 trips from the full quarterly data. Start with this small data table to develop your analysis commands. When you have this working well, you can access the full data set of more than 600,000 events by removing -Small from the name of the data_site. The full data is available here. It’s natural to expect that bikes are rented more at some times of day, some days of the week, some months of the year than others. The variable sdate gives the time (including the date) that the rental started. Exercise 9.2 (Warm-up: temporal patterns) Make the following plots and interpret them: A density plot of the events versus sdate. Use ggplot() and geom_density(). A density plot of the events versus time of day. You can use mutate with lubridate::hour(), and lubridate::minute() to extract the hour of the day and minute within the hour from sdate. Hint: A minute is 1/60 of an hour, so create a field where 3:30 is 3.5 and 3:45 is 3.75. A bar plot of the events versus day of the week. Facet your graph from (b) by day of the week. Is there a pattern? The variable client describes whether the renter is a regular user (level Registered) or has not joined the bike-rental organization (Causal). Do you think these two different categories of users show different rental behavior? How might it interact with the patterns you found in Exercise 9.2? Exercise 9.3 (Customer segmentation) Repeat the graphic from Exercise 9.2 (d) with the following changes: Set the fill aesthetic for geom_density() to the client variable. You may also want to set the alpha for transparency and color=NA to suppress the outline of the density function. Now add the argument position = position_stack() to geom_density(). In your opinion, is this better or worse in terms of telling a story? What are the advantages/disadvantages of each? Rather than faceting on day of the week, create a new faceting variable like this: mutate(wkday = ifelse(lubridate::wday(sdate) %in% c(1,7), \"weekend\", \"weekday\")). What does the variable wkday represent? Try to understand the code. Is it better to facet on wkday and fill with client, or vice versa? Of all of the graphics you created so far, which is most effective at telling an interesting story? Exercise 9.4 (Visualization of bicycle departures by station) Use the latitude and longitude variables in Stations to make a visualization of the total number of departures from each station in the Trips data. To layer your data on top of a map, start your plotting code as follows: myMap&lt;-get_stamenmap(c(-77.1,38.87,-76.975,38.95),zoom=14,maptype=&quot;terrain&quot;) ggmap(myMap) + ... Note: If you want to use Google Maps instead, which do look a bit nicer, you’ll need to get a Google Maps API Key (free but requires credit card to sign up), and then you can use get_map instead of get_stamenmap. Exercise 9.5 Only 14.4% of the trips in our data are carried out by casual users.11 Create a map that shows which area(s) of the city have stations with a much higher percentage of departures by casual users. Interpret your map. Exercise 9.6 (High traffic points) Consider the following: Make a table with the ten station-date combinations (e.g., 14th &amp; V St., 2014-10-14) with the highest number of departures, sorted from most departures to fewest. Hint: as_date(sdate) converts sdate from date-time format to date format. Use a join operation to make a table with only those trips whose departures match those top ten station-date combinations from part (a). Group the trips you filtered out in part (b) by client type and wkday (weekend/weekday), and count the total number of trips in each of the four groups. Interpret your results. Appendix: R Functions Mutating Joins Function/Operator Action Example left_join() Joins two data sets together (adding variables from right to left data sets), keeping all rows of the left or 1st dataset Grades %&gt;% left_join(CourseSizes, by = c(\"sessionID\" = \"sessionID\")) inner_join() Joins two data sets together (adding variables from right to left data sets), keeping only rows in left that have a match in right Grades %&gt;% inner_join(GPAConversion) full_join() Joins two data sets together (adding variables from right to left data sets), keeping all rows of both left and right datasets Grades %&gt;% full_join(CourseSizes, by = c(\"sessionID\" = \"sessionID\")) Filtering Joins Function/Operator Action Example semi_join() Keep only rows in left that have a match in right Grades %&gt;% semi_join(LargeSections) anti_join() Keep only rows in left that don’t have a match in right Grades %&gt;% anti_join(CrossListedSections) There is also a right_join() that adds variables in the reverse direction from the left table to the right table, but we do not really need it as we can always switch the roles of the two tables.↩︎ They are courses that are cross-listed in multiple departments!↩︎ Important: To avoid repeatedly re-reading the files, start the data import chunk with {r cache = TRUE} rather than the usual {r}.↩︎ We can compute this statistic via mean(Trips$client==\"Casual\").↩︎ "],["categorical-variables-as-factors.html", "Topic 10 Categorical Variables as Factors Learning Goals Example: Grade Distribution Assignment 6 Part 2: due Friday, March 3rd @ 11:59pm Appendix: R Functions", " Topic 10 Categorical Variables as Factors Learning Goals Understand the difference between a variable stored as a character vs. a factor Be able to convert a character variable to a factor Develop comfort in manipulating the order and values of a factor with the forcats package to improve summaries and visualizations. Create a new Rmd file (save it as 10-Factors.Rmd). Put this file in a folder Assignment_06 in your COMP_STAT_112 folder. You are used to using template Rmd files but you are ready to create your own! Look at previous Rmd files and notice patterns. You can copy the top YAML section over and adjust. Note that if you use {exercise} instead of {r} that it will automatically number your exercises! Make sure to add fig.alt for your visualizations! From now on, you’ll be expected to create your own Rmd files and make them look clean and organized so that preceptors and instructors can easily read the knitted file and give feedback. Example: Grade Distribution Grades &lt;- read_csv(&quot;https://jamesnormington.github.io/112_spring_2023/data/grades.csv&quot;) Grades &lt;- Grades %&gt;% select(sid, sessionID, grade) %&gt;% distinct(sid, sessionID, .keep_all = TRUE) We will continue with the grades data from the previous activity. Here is a sample to remember what it looks like: Table 10.1: Student grades. sid sessionID grade S31842 session2207 B+ S32436 session3172 S S31671 session3435 A- S31929 session3512 NC Here is a bar chart of the grade distribution: ggplot(Grades, aes(x = grade)) + geom_bar() We can also wrangle a table that just has each grade and the number of times it appears: GradeDistribution &lt;- Grades %&gt;% group_by(grade) %&gt;% summarize(count = n()) # Alternatively, we can use the count() function the creates a variable called n Grades %&gt;% count(grade) Table 10.2: Grade distribution. grade count A 1506 A- 1381 AU 27 B 804 B- 330 B+ 1003 C 137 C- 52 C+ 167 D 18 D- 6 D+ 8 NC 17 S 388 What could be improved about this graphic and table? The grades are listed alphabetically, which isn’t particularly meaningful. Why are they listed that way? Because the variable grade is a character string type: class(Grades$grade) ## [1] &quot;character&quot; When dealing with categorical variables that take a finite number of values (levels, formally), it is often useful to store the variable as a factor, and specify a meaningful order for the levels. For example, when the entries are stored as character strings, we cannot use the levels command to see the full list of values: levels(Grades$grade) ## NULL Converting to factor Let’s first convert the grade variable to a factor: Grades &lt;- Grades %&gt;% mutate(grade = factor(grade)) Now we can see the levels: levels(Grades$grade) ## [1] &quot;A&quot; &quot;A-&quot; &quot;AU&quot; &quot;B&quot; &quot;B-&quot; &quot;B+&quot; &quot;C&quot; &quot;C-&quot; &quot;C+&quot; &quot;D&quot; &quot;D-&quot; &quot;D+&quot; &quot;NC&quot; &quot;S&quot; Moreover, the forcats package (part of tidyverse) allows us to manipulate these factors. Its commands include the following. Changing the order of levels fct_relevel(): manually reorder levels fct_infreq(): order levels from highest to lowest frequency fct_reorder(): reorder levels by values of another variable fct_rev(): reverse the current order Changing the value of levels fct_recode(): manually change levels fct_lump(): group together least common levels More details on these and other commands can be found on the forcats cheat sheet or in Wickham &amp; Grolemund’s chapter on factors. Example 10.1 (Reorder factors) Let’s reorder the grades so that they are in a more meaningful order for the bar chart above. Here are three options: Option 1: From high grade to low grade, with “S” and “AU” at the end: Grades %&gt;% mutate(grade = fct_relevel(grade, c(&quot;A&quot;, &quot;A-&quot;, &quot;B+&quot;, &quot;B&quot;, &quot;B-&quot;, &quot;C+&quot;, &quot;C&quot;, &quot;C-&quot;, &quot;D+&quot;, &quot;D&quot;, &quot;D-&quot;, &quot;NC&quot;, &quot;S&quot;, &quot;AU&quot;))) %&gt;% ggplot(aes(x = grade)) + geom_bar() Option 2: In terms of ascending frequency: ggplot(GradeDistribution) + geom_col(aes(x = fct_reorder(grade, count), y = count)) + labs(x = &quot;grade&quot;) Option 3: In terms of descending frequency: ggplot(GradeDistribution) + geom_col(aes(x = fct_reorder(grade, count, .desc = TRUE), y = count)) + labs(x = &quot;grade&quot;) Example 10.2 (Recode factors) Because it may not be clear what “AU” and “S” stand for, let’s rename them to “Audit” and “Satisfactory”. Grades %&gt;% mutate(grade = fct_relevel(grade, c(&quot;A&quot;, &quot;A-&quot;, &quot;B+&quot;, &quot;B&quot;, &quot;B-&quot;, &quot;C+&quot;, &quot;C&quot;, &quot;C-&quot;, &quot;D+&quot;, &quot;D&quot;, &quot;D-&quot;, &quot;NC&quot;, &quot;S&quot;, &quot;AU&quot;))) %&gt;% mutate(grade = fct_recode(grade, &quot;Satisfactory&quot; = &quot;S&quot;, &quot;Audit&quot; = &quot;AU&quot;)) %&gt;% ggplot(aes(x = grade)) + geom_bar() Assignment 6 Part 2: due Friday, March 3rd @ 11:59pm Exercise 10.1 Now that you’ve developed your data visualization and wrangling skills, develop a research question to address with the grades and courses data, create a high quality visualization that addresses your research question, write a brief description of the visualization and include the insight you gain about the research question. Courses &lt;- read_csv(&quot;https://jamesnormington.github.io/112_spring_2023/data/courses.csv&quot;) Appendix: R Functions Changing the order of levels Function/Operator Action Example fct_relevel() manually reorder levels of a factor Grades %&gt;% mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) fct_infreq() order levels from highest to lowest frequency ggplot(Grades) + geom_bar(aes(x = fct_infreq(grade))) fct_reorder() reorder levels by values of another variable ggplot(GradeDistribution) + geom_col(aes(x = fct_reorder(grade, count), y = count)) fct_rev() reverse the current order ggplot(Grades) + geom_bar(aes(x = fct_rev(fct_infreq(grade)))) Changing the value of levels Function/Operator Action Example fct_recode() manually change levels Grades %&gt;% mutate(grade = fct_recode(grade, \"Satisfactory\" = \"S\", \"Audit\" = \"AU\")) fct_lump() group together least common levels Grades %&gt;% mutate(grade = fct_lump(grade, n = 5)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
