[["index.html", "COMP/STAT 112: Introduction to Data Science Welcome!", " COMP/STAT 112: Introduction to Data Science Welcome! Data icons created by Kiranshastry - Flaticon Note: This site is still in construction! This is the day-to-day course site for Introduction to Data Science (COMP/STAT 112) at Macalester College for Fall 2022. The activities here were developed by a variety of faculty in the MSCS Department at Macalester College. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["course-schedule.html", "Course Schedule", " Course Schedule The schedule below is a tentative outline of our plans for the semester. Before each class period, please watch/read the indicated videos/readings and check on your understanding by actively reviewing the associated Learning Goals. Week 1 Date Activity Topic & Assignments Optional Readings/Videos 8/31 1 Intro to R, RStudio, and R Markdown Slides for Today Assignment 1 Due Tuesday, September 6 at 11:59pm Readings: Introduction to R Markdown, by Wickham and Grolemund Tidy Data, by Wickham Tidy Data (12.1, 12.2), by Wickham and Grolemund Videos: Setting up for success in the course, by Lisa Lendway Introduction to RStudio, by Alicia Johnson Check version of R and RStudio, by Lisa Lendway RStudio tour, by Lisa Lendway R Markdown introduction, by Lisa Lendway 9/2 Friday Fun: Community Building Scavenger Hunt Finish Assignment 1 (due 9/6). Week 11 Date Activity Topic Content: Videos/Readings Class Materials: Slides/Notes 4/5 Spatial: Catch up Day Slides Board Notes 4/7 Content Conversation 2 (Sign up for a slot here) Work on Spatial Mini Project, due 4/12 Week 12 Date Activity Topic Content: Videos/Readings Class Materials: Slides/Notes 4/12 Capstone Project Work 4/14 Capstone Project Work Finish Spatial Mini Project, due 4/12 Start Capstone Project, due 5/6 Week 13 Date Activity Topic Content: Videos/Readings Class Materials: Slides/Notes 4/19 Capstone Project Work 4/21 Capstone Project Work Continue with Capstone Project, due 5/6 Week 14 Date Activity Topic Content: Videos/Readings Class Materials: Slides/Notes 4/26 Capstone Project Work 4/28 Capstone Project Work Continue with Capstone Project, due 5/6 Finals Week Date Activity Topic Content: Videos/Readings Class Materials: Slides/Notes Thurs 5/5: 1:30-3:30pm Section 2 Presentations Fri 5/6: 8-10am Section 1 Presentations FinishCapstone Project, due 5/6 "],["learning-goals.html", "Learning Goals General Skills Course Topics", " Learning Goals The goal of this course is for you to gain confidence in carrying out the entire data science pipeline, from research question formulation, to data collection/scraping, to wrangling, to modeling, to visualization, to presentation and communication Specific course topics and general skills are listed below. General Skills Data Communication In written and oral formats: Inform and justify data cleaning and analysis process and the resulting conclusions with clear, organized, logical, and compelling details that adapt to the background, values, and motivations of the audience and context in which communication occurs. Collaborative Learning Understand and demonstrate characteristics of effective collaboration (team roles, interpersonal communication, self-reflection, awareness of social dynamics, advocating for yourself and others). Develop a common purpose and agreement on goals. Be able to contribute questions or concerns in a respectful way. Share and contribute to the group’s learning in an equitable manner. Develop a familiarity and comfort in using collaboration tools such as Git and Github. Course Topics Specific learning objectives for our course topics are listed below. Use these to guide your synthesis of course material for specific topics. Note that the topics are covered in the order of the data science pipeline, not the order in which we will cover them in class. Foundation Intro to R, RStudio, and R Markdown Download and install the necessary tools (R, RStudio) Develop comfort in navigating the tools in RStudio Develop comfort in writing and knitting a R Markdown file Identify the characteristics of tidy data Use R code: as a calculator and to explore tidy data Data Acquisition Data Import and Basic Cleaning TBA Data Scraping (rvest) TBA APIs TBA SQL TBA Data Wrangling Six Main Wrangling Verbs Understand and be able to use the following verbs appropriate: select, mutate, filter, arrange, summarize, group_by Develop working knowledge of working with dates and lubridate functions Reshaping Data Understand the difference between wide and long data format and distinguish the case (unit of observation) for a given data set Develop comfort in using pivot_wider and pivot_longer in the tidyr package Joining Data TBA factors TBA mini-project TBA Data Visualization The learning goals may be adjusted before we start the material of this section. Introduction to Data Visualization Understand the Grammar of Graphics Use ggplot2 functions to create basic layers of graphics Understand the different basic univariate visualizations for categorical and quantiative variables Effective Visualization Understand and apply the guiding principles of effective visualizations Bivariate Identify appropriate types of bivariate visualizations, depending on the type of variables (categorical, quantitative) Create basic bivariate visualizations based on real data with ggplot2 functions Multivariate Understand how we can use additional aesthetics such as color and size to incorporate a third (or more variables) to a bivariate plot with ggplot2 functions Develop comfort with creating and interpreting heat maps and star plots, which allow you to look for patterns in variation in many variables. Spatial Plot data points on top of a map using the ggmap() function along with ggplot2 functions Create choropleth maps using geom_map() Add points and other ggplot2 features to a map created from geom_map() Understand the basics of creating a map using leaflet, including adding points and choropleths to a base map Network and Interactive TBA Shiny TBA Tables TBA Data Modeling The learning goals may be adjusted before we start the material of this section. EDA TBA Text Analysis TBA Project Presentations &amp; Communication The learning goals may be adjusted before we start the material of this section. Oral Communication TBA Written Communication TBA "],["intro-to-r-rstudio-and-r-markdown.html", "Topic 1 Intro to R, RStudio, and R Markdown Learning Goals Getting Started in RStudio R Markdown and Reproducible Research Practice", " Topic 1 Intro to R, RStudio, and R Markdown Learning Goals Download and install the necessary tools (R, RStudio) Develop comfort in navigating the tools in RStudio Develop comfort in writing and knitting a R Markdown file Identify the characteristics of tidy data Use R code: as a calculator and to explore tidy data Getting Started in RStudio As you might guess from the name, “Data Science” requires data. Working with modern (large, messy) data sets requires statistical software. We’ll exclusively use RStudio. Why? it’s free it’s open source (the code is free &amp; anybody can contribute to it) it has a huge online community (which is helpful for when you get stuck) it’s one of the industry standards it can be used to create reproducible and lovely documents (In fact, the course materials that you’re currently reading were constructed entirely within RStudio!) Download R &amp; RStudio To get started, take the following two steps in the given order. Even if you already have R/RStudio, make sure to update to the most recent versions. Download and install the R statistical software at https://mirror.las.iastate.edu/CRAN/ Download and install the FREE version of RStudio at https://www.rstudio.com/products/rstudio/download/#download What’s the difference between R and RStudio? Mainly, RStudio requires R – thus it does everything R does and more. We will be using RStudio exclusively. A quick tour of RStudio Open RStudio! You should see four panes, each serving a different purpose: Figure 1.1: RStudio Interface This short video tour of RStudio summarizes some basic features of the console. Exercise 1.1 (Warm Up) Use RStudio as a simple calculator to do the following: Perform a simple calculation: calculate 90/3. RStudio has built-in functions to which we supply the necessary arguments: function(arguments). Use the built-in function sqrt to calculate the square root of 25. Use the built-in function rep to repeat the number “5” eight times. Use the seq function to create the vector (0, 3, 6, 9, 12). (The video doesnt cover this!) Create a new vector by concatenating three repetitions of the vector from the previous part. Solution 90/3 ## [1] 30 sqrt(25) ## [1] 5 rep(5, times = 8) ## [1] 5 5 5 5 5 5 5 5 seq(0, 12, by = 3) ## [1] 0 3 6 9 12 rep(seq(0, 12, by = 3), times = 3) ## [1] 0 3 6 9 12 0 3 6 9 12 0 3 6 9 12 rep(seq(0, 12, by = 3), each = 3) #notice the difference between times and each ## [1] 0 0 0 3 3 3 6 6 6 9 9 9 12 12 12 Exercise 1.2 (Assignment) We often want to store our output for later use (why?). The basic idea in RStudio: `name &lt;- output` Copy and paste the following code into the console, line by line. NOTE: RStudio ignores any content after the #. Thus we use this to ‘comment’ and organize our code. #type square_3 square_3 #calculate 3 squared 3^2 #store this as &quot;square_3&quot; square_3 &lt;- 3^2 #type square_3 again! square_3 #do some math with square_3 square_3 + 2 Tidy Data Not only does “Data Science” require statistical software, it requires DATA! Consider the Google definition: Figure 1.2: A datum. With this definition in mind, which of the following are examples of data? tables ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 2 1 78.5 67.0 F 69.2 4 ## 3 1 78.5 67.0 F 69.0 4 ## 4 1 78.5 67.0 F 69.0 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 photo video text / tweets We’ll mostly work with data that look like this: ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 2 1 78.5 67.0 F 69.2 4 ## 3 1 78.5 67.0 F 69.0 4 ## 4 1 78.5 67.0 F 69.0 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 This isn’t as restrictive as it seems. How can we convert the above signals, photos, videos, and text to a data table format? Example: After a scandal among FIFA officials, fivethirtyeight.com posted an analysis of FIFA viewership, “How to Break FIFA”. Here’s a snapshot of the data used in this article: country confederation population_share tv_audience_share gdp_weighted_share United States CONCACAF 4.5 4.3 11.3 Japan AFC 1.9 4.9 9.1 China AFC 19.5 14.8 7.3 Germany UEFA 1.2 2.9 6.3 Brazil CONMEBOL 2.8 7.1 5.4 United Kingdom UEFA 0.9 2.1 4.2 Italy UEFA 0.9 2.1 4.0 France UEFA 0.9 2.0 4.0 Russia UEFA 2.1 3.1 3.5 Spain UEFA 0.7 1.8 3.1 The data table above is in tidy format. Tidy data tables have three key features: Each row represents a unit of observation. Each column represents a variable (ie. an attribute of the cases that can vary from case to case). Each variable is one of two types: quantitative = numerical categorical = discrete possibilities/categories Each entry contains a single data value; no analysis, summaries, footnotes, comments, etc., and only one value per cell Exercise 1.3 (Units of Observation and Variables) Consider the following in a group: What are the units of observation in the FIFA data? What are the variables? Which are quantitative? Which are categorical? Are these tidy data? Solution a. A FIFA member country b. country name, soccer or football confederation, country&#39;s share of global population (percentage), country&#39;s share of global world cup TV Audience (percentage), country&#39;s GDP-weighted audience share (percentage) c. Yes Exercise 1.4 (Tidy vs. Untidy) Check out the following data. Explain to each other why they are untidy and how we can tidy them. Data 1: FIFA country confederation population share tv_share United States CONCACAF i don’t know* 4.3% *look up later Japan AFC 1.9 4.9% China AFC 19.5 14.8% total=24% Data 2: Gapminder life expectancies by country country 1952 1957 1962 Asia Afghanistan 28.8 30.3 32.0 Bahrain 50.9 53.8 56.9 Africa Algeria 43.0 45.7 48.3 Solution a. There are notes such as &quot;I don&#39;t know&quot; and &quot;look up later&quot; in columns with numeric values; the last row with the total is a summary. We could remove the text notes, replace it with the value if known, and remove the last row with the total summary. b. The first column does not have a row name. It should be continent. Additionally, Bahrain needs a value for the continent. Data Basics in RStudio For now, we’ll focus on tidy data. In a couple of weeks, you’ll learn how to turn untidy data into tidy data. Exercise 1.5 (Importing Package Data) The first step to working with data in RStudio is getting it in there! How we do this depends on its format (eg: Excel spreadsheet, csv file, txt file) and storage locations (eg: online, within Wiki, desktop). Luckily for us, the fifa_audience data are stored in the fivethirtyeight RStudio package. Copy and paste the following code into the Console and press Enter. #load the fivethirtyeight package library(fivethirtyeight) #load the fifa data data(&quot;fifa_audience&quot;) #store this under a shorter, easier name fifa &lt;- fifa_audience Exercise 1.6 (Examining Data Structures) Before we can analyze our data, we must understand its structure. Try out the following functions (copy and paste into the Console). For each, make a note that describes its action. #(what does View do?) View(fifa) #(what does head do?) head(fifa) #(what does dim do?) dim(fifa) #(what does names do?) names(fifa) Solution #View() opens up a new tab with a spread sheet preview of the data to visually explore the data. It is commented out in the Rmarkdown file because this is an interactive feature #View(fifa) #head() gives the first 6 (default number) rows of a data set head(fifa) ## # A tibble: 6 × 5 ## country confederation population_share ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 United States CONCACAF 4.5 ## 2 Japan AFC 1.9 ## 3 China AFC 19.5 ## 4 Germany UEFA 1.2 ## 5 Brazil CONMEBOL 2.8 ## 6 United Kingdom UEFA 0.9 ## # … with 2 more variables: ## # tv_audience_share &lt;dbl&gt;, ## # gdp_weighted_share &lt;dbl&gt; #dim() gives the number of rows and number of columns dim(fifa) ## [1] 191 5 #names() gives the names of the columns/variables names(fifa) ## [1] &quot;country&quot; &quot;confederation&quot; ## [3] &quot;population_share&quot; &quot;tv_audience_share&quot; ## [5] &quot;gdp_weighted_share&quot; Exercise 1.7 (Codebooks) Data are also only useful if we know what they measure! The fifa data table is tidy – it doesn’t have any helpful notes. Rather, information about the data is stored in a separate codebook. Codebooks can be stored in many ways (eg: Google docs, word docs, etc). Here the authors have made their codebook available in RStudio (under the original fifa_audience name). Check it out (run the following code in the console): ?fifa_audience What does population_share measure? What are the units of population_share? Solution a. Country&#39;s share of global population b. Percentage between 0 and 100   Exercise 1.8 (Examining a Single Variable) Consider the following: We might want to access and focus on a single variable. To this end, we can use the $ notation: fifa$tv_audience_share fifa$confederation It’s important to understand the format/class of each variable (quantitative, categorical, date, etc) in both its meaning and its structure within RStudio: class(fifa$tv_audience_share) class(fifa$confederation) If a variable is categorical (either in character or factor format), we can determine its levels / category labels: levels(fifa$confederation) levels(factor(fifa$confederation)) R Markdown and Reproducible Research Reproducible research is the idea that data analyses, and more generally, scientific claims, are published with their data and software code so that others may verify the findings and build upon them. - Reproducible Research, Coursera Useful Resources: R Markdown Quick Tour R Markdown Cheatsheet or in RStudio: Go to Help &gt; Cheat Sheets &gt; R Markdown Cheat Sheet R Markdown Reference Guide or in RStudio: Go to Help &gt; Cheat Sheets &gt; R Markdown Reference Guide Research often makes claims that are difficult to verify. A recent study of published psychology articles found that less than half of published claims could be reproduced. One of the most common reasons claims cannot be reproduced is confusion about data analysis. It may be unclear exactly how data was prepared and analyzed, or there may be a mistake in the analysis. In this course we will use an innovative format called R Markdown that dramatically increases the transparency of data analysis. R Markdown interleaves data, R code, graphs, tables, and text, packaging them into an easily publishable format. To use R Markdown, you will write an R Markdown formatted file in RStudio and then ask RStudio to knit it into an HTML document (or occasionally a PDF or MS Word document). Exercise 1.9 (Deduce the R Markdown Format) Look at this Sample RMarkdown and the HTML webpage it creates. Consider the following and discuss: How are bullets, italics, and section headers represented in the R Markdown file? How does R code appear in the R Markdown file? In the HTML webpage, do you see the R code, the output of the R code, or both? Solution Bullets are represented with * and + Italics are represented with * before and after a word or phrase Section headers are represented with # R code chunks are between 3 tick marks at the beginning and end; it is R code if there is an r in curly braces If echo=FALSE in curly braces, the code is not shown. Otherwise, both code and output are shown by default.   Now take a look at the R Markdown Cheatsheet. Look up the R Markdown features from the previous question on the cheatsheet. There’s a great deal more information there. Practice Complete the following. If you get stuck along the way, refer to the R Markdown Cheatsheet linked above, search the web for answers, and/or ask for help! Exercise 1.10 (Your First R Markdown File) Create a new R Markdown about your favorite food. Create a new file in RStudio (File -&gt; New File -&gt; R Markdown) called First_Markdown. Make sure you can compile (Knit) the Markdown into a webpage (html file). Add a new line between title and output that reads: author: Your Name. Create a brief essay about your favorite food. Make sure to include: A picture from the web A bullet list A numbered list Compile the document into an html file. Exercise 1.11 (New Data!) There’s a data set named comic_characters in the fivethirtyeightdata package. Check out the codebook (hint: use ?) to understand what these data measure. Then add a second section to your R Markdown file, and then use code chunks and R commands to perform/answer the following tasks/questions: Load the data. What are the units of observation? How many observations are there? In a new code chunk, print out the first 12 rows of the data set. Get a list of all variable names. What’s the class of the date variable? List all of the unique entries in the gsm variable (no need to include NA). Compile the document into an html file. "],["joining-two-data-frames.html", "Topic 2 Joining Two Data Frames Learning Goals Joins Bicycle-Use Patterns", " Topic 2 Joining Two Data Frames Learning Goals Understand the concept of keys and variables that uniquely identify rows or cases Understand the different types of joins, different ways of combining two data frames together Develop comfort in using mutating joins: left_join, inner_join and full_join in the dplyr package Develop comfort in using filtering joins: semi_join, anti_join in the dplyr package You can download a template .Rmd of this activity here. Joins A join is a verb that means to combine two data tables. These tables are often called the left and the right tables. There are several kinds of join. All involve establishing a correspondance — a match — between each case in the left table and zero or more cases in the right table. The various joins differ in how they handle multiple matches or missing matches. Establishing a match between cases A match between a case in the left data table and a case in the right data table is made based on the values in keys, variables that uniquely define observations in a data table. As an example, we’ll examine the following two tables on grades and courses. The Grades file has one case for each class of each student, and includes variables describing the ID of the student (sid), the ID of the session (section/class), and the grade received. The Courses file has variables for the ID of the session (section/class), the department (coded), the level, the semester, the enrollment, and the ID of the instructor (iid). We show a few random rows of each table below. Table 2.1: Student grades. sid sessionID grade S31842 session2207 B+ S32436 session3172 S S31671 session3435 A- S31929 session3512 NC Table 2.2: Information about each course section. sessionID dept level sem enroll iid session2780 O 300 SP2003 21 inst298 session3520 k 300 FA2004 16 inst463 session1965 d 100 FA2001 25 inst414 session3257 o 200 SP2004 16 inst312 Keys There are two types of keys: A primary key uniquely identifies an observation in its own table. A foreign key uniquely identifies an observation in another table. Example 2.1 What variables are the primary keys for Grades? What variables are the primary keys for Courses? Solution sid (student ID) and sessionID (class ID) are the primary keys for Grades as they unique identify each case. # can check to make sure that there are no combinations of sid and session ID that have more than 1 row Grades %&gt;% count(sid, sessionID) %&gt;% filter(n &gt; 1) ## # A tibble: 0 × 3 ## # … with 3 variables: sid &lt;chr&gt;, ## # sessionID &lt;chr&gt;, n &lt;int&gt; sessionID (class ID) and dept are the primary keys for Courses as they unique identify each case. You may have thought that sessionID alone was sufficient; however, if a course is cross-listed, then it may have multiple departments listed. # check to make sure that there are no combinations # of session ID and dept that have more than 1 row Courses %&gt;% count(sessionID, dept) %&gt;% filter(n &gt; 1) ## # A tibble: 0 × 3 ## # … with 3 variables: sessionID &lt;chr&gt;, ## # dept &lt;chr&gt;, n &lt;int&gt; Example 2.2 What variables are the foreign keys in Grades for Courses? What variables are the foreign keys in Courses for Grades? Solution sessionID (class ID) is part of a foreign key in Grades for Courses. If we group_by and summarize first to deal with cross-listed courses, then sessionID is the foreign key in Grades for Courses. # can check to make sure that once we combine enrollment between cross-listed courses, each session ID only has 1 row Courses %&gt;% group_by(sessionID, level, sem, iid) %&gt;% summarize(total_enroll = sum(enroll)) %&gt;% count(sessionID) %&gt;% filter(n &gt; 1) ## # A tibble: 0 × 4 ## # Groups: sessionID, level, sem [0] ## # … with 4 variables: sessionID &lt;chr&gt;, ## # level &lt;dbl&gt;, sem &lt;chr&gt;, n &lt;int&gt; sessionID in Courses is part of a foreign key that uniquely identify rows in Grades. Matching In order to establish a match between two data tables, You specify which variables (or keys) to use. Each variable is specify as a pair, where one variable from the left table corresponds to one variable from the right table. Cases must have exactly equal values in the left variable and right variable for a match to be made. Mutating joins The first class of joins are mutating joins, which add new variables (columns) to the left data table from matching observations in the right table.1 The main difference in the three mutating join options in this class is how they answer the following questions: What happens when a case in the right table has no matches in the left table? What happens when a case in the left table has no matches in the right table? Three mutating join functions: left_join(): the output has all cases from the left, regardless if there is a match in the right, but discards any cases in the right that do not have a match in the left. inner_join(): the output has only the cases from the left with a match in the right. full_join(): the output has all cases from the left and the right. This is less common than the first two join operators. When there are multiple matches in the right table for a particular case in the left table, all three of these mutating join operators produce a separate case in the new table for each of the matches from the right. Example 2.3 (Average class size: varying viewpoints) Determine the average class size from the viewpoint of a student and the viewpoint of the Provost / Admissions Office. Solution Provost Perspective: The Provost counts each section as one class and takes the average of all classes. We have to be a little careful and cannot simply do mean(Courses$enroll), because some sessionID appear twice on the course list. Why is that?2 We can still do this from the data we have in the Courses table, but we should aggregate by sessionID first: CourseSizes &lt;- Courses %&gt;% group_by(sessionID) %&gt;% summarise(total_enroll = sum(enroll)) mean(CourseSizes$total_enroll) ## [1] 21.45251 Student Perspective: To get the average class size from the student perspective, we can join the enrollment of the section onto each instance of a student section. Here, the left table is Grades, the right table is CourseSizes, we are going to match based on sessionID, and we want to add the variable total_enroll from CoursesSizes. We’ll use a left_join since we aren’t interested in any sections from the CourseSizes table that do not show up in the Grades table; their enrollments should be 0, and they are not actually seen by any students. Note, e.g., if there were 100 extra sections of zero enrollments on the Courses table, this would change the average from the Provost’s perspective, but not at all from the students’ perspective. If the by = is omitted from a join, then R will perform a natural join, which matches the two tables by all variables they have in common. In this case, the only variable in common is the sessionID, so we would get the same results by omitting the second argument. In general, this is not reliable unless we check ahead of time which variables the tables have in common. If two variables to match have different names in the two tables, we can write by = c(\"name1\" = \"name2\"). EnrollmentsWithClassSize &lt;- Grades %&gt;% left_join(CourseSizes, by = c(&quot;sessionID&quot; = &quot;sessionID&quot;) ) %&gt;% select(sid, sessionID, total_enroll) Table 2.3: Student enrollments with the section size. sid sessionID total_enroll S31842 session2207 11 S32436 session3172 51 S31671 session3435 15 S31929 session3512 13 AveClassEachStudent &lt;- EnrollmentsWithClassSize %&gt;% group_by(sid) %&gt;% summarise(ave_enroll = mean(total_enroll, na.rm = TRUE)) Table 2.4: Average class size seen by each individual student. sid ave_enroll S32169 34.25000 S32121 23.33333 S32472 24.53846 S31467 23.82353 The na.rm = TRUE here says that if the class size is not available for a given class, we do not count that class towards the student’s average class size. What is another way to capture the same objective? We could have used an inner_join instead of a left_join when we joined the tables to eliminate any entries from the left table that did not have a match in the right table. Now we can take the average of the AveClassEachStudent table, counting each student once, to find the average class size from the student perspective: mean(AveClassEachStudent$ave_enroll) ## [1] 24.41885 We see that the average size from the student perspective (24.4) is greater than the average size from the Provost’s perspective (21.5). It is a fun probability exercise to prove that this fact is always true!! Filtering joins The second class of joins are filtering joins, which select specific cases from the left table based on whether they match an observation in the right table. semi_join(): discards any cases in the left table that do not have a match in the right table. If there are multiple matches of right cases to a left case, it keeps just one copy of the left case. anti_join(): discards any cases in the left table that have a match in the right table. A particularly common employment of these joins is to use a filtered summary as a comparison to select a subset of the original cases, as follows. Example 2.4 (semi_join to compare to a filtered summary) Find a subset of the Grades data that only contains data on the four largest sections in the Courses data set. Solution LargeSections &lt;- Courses %&gt;% group_by(sessionID) %&gt;% summarise(total_enroll = sum(enroll)) %&gt;% top_n(total_enroll, n = 4) GradesFromLargeSections &lt;- Grades %&gt;% semi_join(LargeSections) Example 2.5 (semi_join) Use semi_join() to create a table with a subset of the rows of Grades corresponding to all classes taken in department J. Solution There are multiple ways to do this. We could do a left join to the Grades table to add on the dept variable, and then filter by department, then select all variables except the additional dept variable we just added. Here is a more direct way with semi_join that does not involve adding and subtracting the extra variable: JCourses &lt;- Courses %&gt;% filter(dept == &quot;J&quot;) JGrades &lt;- Grades %&gt;% semi_join(JCourses) Let’s double check this worked. Here are the first few entries of our new table: Table 2.5: Student enrollments in Department J. sid sessionID grade S31185 session1791 A- S31185 session1792 B+ S31185 session1794 B- S31185 session1795 C+ The first entry is for session1791. Which department is that course in? What department should it be? (Courses %&gt;% filter(sessionID == &quot;session1791&quot;)) ## # A tibble: 1 × 6 ## sessionID dept level sem enroll iid ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 session1791 J 100 FA1993 22 inst223 Great, it worked! But that only checked the first one. What if we want to double check all of the courses included in Table 2.5? We can add on the department and do a group by to count the number from each department in our table. JGrades %&gt;% left_join(Courses) %&gt;% count(dept) ## # A tibble: 1 × 2 ## dept n ## &lt;chr&gt; &lt;int&gt; ## 1 J 148 More join practice Exercise 2.1 Use your wrangling skills to answer the following questions. Hint 1: start by thinking about what tables you might need to join (if any) and identifying the corresponding variables to match. Hint 2: you’ll need an extra table to convert grades to grade point averages. I’ve given you the code below. How many student enrollments in each department? What’s the grade-point average (GPA) for each student? The average student GPA? Hint: There are some “S” and “AU” grades that we want to exclude from GPA calculations. What is the correct variant of join to accomplish this? What fraction of grades are below B+? What’s the grade-point average for each instructor? We cannot actually compute the correct grade-point average for each department from the information we have. The reason why is due to cross-listed courses. Students for those courses could be enrolled under either department, and we do not know which department to asign the grade to. There are a number of possible workarounds to get an estimate. One would be to assign all grades in a section to the department of the instructor, which we’d have to infer from the data. Instead, start by creating a table with all cross-listed courses. Then use an anti_join to eliminate all cross-listed courses. Finally, use an inner_join to compute the grade-point average for each department. (GPAConversion &lt;- tibble(grade = c(&quot;A+&quot;, &quot;A&quot;, &quot;A-&quot;, &quot;B+&quot;, &quot;B&quot;, &quot;B-&quot;, &quot;C+&quot;, &quot;C&quot;, &quot;C-&quot;, &quot;D+&quot;, &quot;D&quot;, &quot;D-&quot;, &quot;NC&quot;), gp = c(4.3, 4, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0))) ## # A tibble: 13 × 2 ## grade gp ## &lt;chr&gt; &lt;dbl&gt; ## 1 A+ 4.3 ## 2 A 4 ## 3 A- 3.7 ## 4 B+ 3.3 ## 5 B 3 ## 6 B- 2.7 ## 7 C+ 2.3 ## 8 C 2 ## 9 C- 1.7 ## 10 D+ 1.3 ## 11 D 1 ## 12 D- 0.7 ## 13 NC 0 Bicycle-Use Patterns In this activity, you’ll examine some factors that may influence the use of bicycles in a bike-renting program. The data come from Washington, DC and cover the last quarter of 2014. Figure 2.1: A typical Capital Bikeshare station. This one is at Florida and California, next to Pleasant Pops. Figure 2.2: One of the vans used to redistribute bicycles to different stations. Two data tables are available: Trips contains records of individual rentals here Stations gives the locations of the bike rental stations here Here is the code to read in the data:3 data_site &lt;- &quot;https://bcheggeseth.github.io/112_fall_2022/data/2014-Q4-Trips-History-Data-Small.rds&quot; Trips &lt;- readRDS(gzcon(url(data_site))) Stations &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/DC-Stations.csv&quot;) The Trips data table is a random subset of 10,000 trips from the full quarterly data. Start with this small data table to develop your analysis commands. When you have this working well, you can access the full data set of more than 600,000 events by removing -Small from the name of the data_site. The full data is available here. Warm-up: Temporal patterns It’s natural to expect that bikes are rented more at some times of day, some days of the week, some months of the year than others. The variable sdate gives the time (including the date) that the rental started. Exercise 2.2 (Warm-up: temporal patterns) Make the following plots and interpret them: A density plot of the events versus sdate. Use ggplot() and geom_density(). A density plot of the events versus time of day. You can use mutate with lubridate::hour(), and lubridate::minute() to extract the hour of the day and minute within the hour from sdate. Hint: A minute is 1/60 of an hour, so create a field where 3:30 is 3.5 and 3:45 is 3.75. A histogram of the events versus day of the week. Facet your graph from (b) by day of the week. Is there a pattern? The variable client describes whether the renter is a regular user (level Registered) or has not joined the bike-rental organization (Causal). Do you think these two different categories of users show different rental behavior? How might it interact with the patterns you found in Exercise 2.2? Exercise 2.3 (Customer segmentation) Repeat the graphic from Exercise 2.2 (d) with the following changes: Set the fill aesthetic for geom_density() to the client variable. You may also want to set the alpha for transparency and color=NA to suppress the outline of the density function. Now add the argument position = position_stack() to geom_density(). In your opinion, is this better or worse in terms of telling a story? What are the advantages/disadvantages of each? Rather than faceting on day of the week, create a new faceting variable like this: mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), \"weekend\", \"weekday\")). What does the variable wday represent? Try to understand the code. Is it better to facet on wday and fill with client, or vice versa? Of all of the graphics you created so far, which is most effective at telling an interesting story? Mutating join practice: Spatial patterns Exercise 2.4 (Visualization of bicycle departures by station) Use the latitude and longitude variables in Stations to make a visualization of the total number of departures from each station in the Trips data. To layer your data on top of a map, start your plotting code as follows: myMap&lt;-get_stamenmap(c(-77.1,38.87,-76.975,38.95),zoom=14,maptype=&quot;terrain&quot;) ggmap(myMap) + ... Note: If you want to use Google Maps instead, which do look a bit nicer, you’ll need to get a Google Maps API Key (free but requires credit card to sign up), and then you can use get_map instead of get_stamenmap. Exercise 2.5 Only 14.4% of the trips in our data are carried out by casual users.4 Create a map that shows which area(s) of the city have stations with a much higher percentage of departures by casual users. Interpret your map. Filtering join practice: Spatiotemporal patterns Exercise 2.6 (High traffic points) Make a table with the ten station-date combinations (e.g., 14th &amp; V St., 2014-10-14) with the highest number of departures, sorted from most departures to fewest. Hint: as_date(sdate) converts sdate from date-time format to date format. Use a join operation to make a table with only those trips whose departures match those top ten station-date combinations from part (a). Group the trips you filtered out in part (b) by client type and wday (weekend/weekday), and count the total number of trips in each of the four groups. Interpret your results. There is also a right_join() that adds variables in the reverse direction from the left table to the right table, but we do not really need it as we can always switch the roles of the two tables.↩︎ They are courses that are cross-listed in multiple departments!↩︎ Important: To avoid repeatedly re-reading the files, start the data import chunk with {r cache = TRUE} rather than the usual {r}.↩︎ We can compute this statistic via mean(Trips$client==\"Casual\").↩︎ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
