[["index.html", "COMP/STAT 112: Introduction to Data Science Welcome!", " COMP/STAT 112: Introduction to Data Science Welcome! Data icons created by Kiranshastry - Flaticon Note: This site is still in construction! This is the day-to-day course site for Introduction to Data Science (COMP/STAT 112) taught by Professor Brianna Heggeseth at Macalester College for Fall 2022. The activities here were developed by a variety of faculty in the MSCS Department at Macalester College. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["course-schedule.html", "Course Schedule", " Course Schedule The schedule below is a tentative outline of our plans for the semester. For each class period, please start by actively reviewing the associated Learning Goals, review/finish the daily activity (turn in by deadline), and watch/read the indicated videos/readings to supplement your understanding. Week 1 Date Activity Topic & Assignments Optional Readings/Videos 8/31 1 Intro to R, RStudio, and R Markdown Slides for Today Assignment 1 Due Tuesday, September 6 at 11:59pm Readings: Introduction to R Markdown, by Wickham and Grolemund Tidy Data, by Wickham Tidy Data (12.1, 12.2), by Wickham and Grolemund Quarto, a VERY new alternative to R Markdown Videos: Setting up for success in the course, by Lisa Lendway Introduction to RStudio, by Alicia Johnson Check version of R and RStudio, by Lisa Lendway RStudio tour, by Lisa Lendway R Markdown introduction, by Lisa Lendway 9/2 Friday Fun: Community Building Scavenger Hunt Finish Assignment 1 (due 9/6). "],["learning-goals.html", "Learning Goals General Skills Course Topics", " Learning Goals The goal of this course is for you to gain confidence in carrying out the entire data science pipeline, from research question formulation, to data collection/scraping, to wrangling, to modeling, to visualization, to presentation and communication Specific course topics and general skills are listed below. General Skills Data Communication In written and oral formats: Inform and justify data cleaning and analysis process and the resulting conclusions with clear, organized, logical, and compelling details that adapt to the background, values, and motivations of the audience and context in which communication occurs. Collaborative Learning Understand and demonstrate characteristics of effective collaboration (team roles, interpersonal communication, self-reflection, awareness of social dynamics, advocating for yourself and others). Develop a common purpose and agreement on goals. Be able to contribute questions or concerns in a respectful way. Share and contribute to the group’s learning in an equitable manner. Develop a familiarity and comfort in using collaboration tools such as Git and Github. Course Topics Specific learning objectives for our course topics are listed below. Use these to guide your synthesis of course material for specific topics. Note that the topics are covered in the order of the data science pipeline, not the order in which we will cover them in class. Foundation Intro to R, RStudio, and R Markdown Download and install the necessary tools (R, RStudio) Develop comfort in navigating the tools in RStudio Develop comfort in writing and knitting a R Markdown file Identify the characteristics of tidy data Use R code: as a calculator and to explore tidy data Data Acquisition Data Import and Basic Cleaning Develop comfort in finding an existing data set to import into R Develop comfort in importing data of a variety of file types into R Understand and implement the data cleaning process to make values consistent Understand the implications of different ways of dealing with missing values with replace_na and drop_na Data Scraping (rvest) Develop comfort in using CSS selectors and the Selector Gadget to identify data of interest within a website Use html_nodes and html_text within rvest packages to scrape data from websites using CSS selectors Develop initial comfort in cleaning text data APIs Understand the difference between acquiring data through web scraping vs. a web API Set up an API key for a public API Develop comfort in using a wrapper package or url-method of calling a web API Recognize the structure in a url for a web API and adjust for your purposes SQL Develop comfort in composing SQL queries See the connections between tidyverse verbs and SQL commands Data Wrangling Six Main Wrangling Verbs Understand and be able to use the following verbs appropriate: select, mutate, filter, arrange, summarize, group_by Develop working knowledge of working with dates and lubridate functions Reshaping Data Understand the difference between wide and long data format and distinguish the case (unit of observation) for a given data set Develop comfort in using pivot_wider and pivot_longer in the tidyr package Joining Data Understand the concept of keys and variables that uniquely identify rows or cases Understand the different types of joins, different ways of combining two data frames together Develop comfort in using mutating joins: left_join, inner_join and full_join in the dplyr package Develop comfort in using filtering joins: semi_join, anti_join in the dplyr package Categorical Variables as Factors Understand the difference between a variable stored as a character vs. a factor Be able to convert a character variable to a factor Develop comfort in manipulating the order and values of a factor with the forcats package to improve summaries and visualizations. Wrangling Text using Regular Expression Develop comfort in working with strings of text data Use regular expressions to search and replace, detect patterns, locate patterns, extract patterns, and separate text with the stringr package. Mini-Project Apply data wrangling and visualization skills to a new data set Data Visualization The learning goals may be adjusted before we start the material of this section. Introduction to Data Visualization Understand the Grammar of Graphics Use ggplot2 functions to create basic layers of graphics Understand the different basic univariate visualizations for categorical and quantiative variables Effective Visualization Understand and apply the guiding principles of effective visualizations Bivariate Identify appropriate types of bivariate visualizations, depending on the type of variables (categorical, quantitative) Create basic bivariate visualizations based on real data with ggplot2 functions Multivariate Understand how we can use additional aesthetics such as color and size to incorporate a third (or more variables) to a bivariate plot with ggplot2 functions Develop comfort with creating and interpreting heat maps and star plots, which allow you to look for patterns in variation in many variables. Spatial Plot data points on top of a map using the ggmap() function along with ggplot2 functions Create choropleth maps using geom_map() Add points and other ggplot2 features to a map created from geom_map() Understand the basics of creating a map using leaflet, including adding points and choropleths to a base map Network and Interactive TBD Shiny TBD Tables TBD Data Modeling The learning goals may be adjusted before we start the material of this section. EDA Understand the first steps that should be taken when you encounter a new data set Develop comfort in knowing how to explore data to understand it Develop comfort in formulating research questions Text Analysis TBD "],["intro-to-r-rstudio-and-r-markdown.html", "Topic 1 Intro to R, RStudio, and R Markdown Learning Goals Getting Started in RStudio R Markdown and Reproducible Research Practice", " Topic 1 Intro to R, RStudio, and R Markdown Learning Goals Download and install the necessary tools (R, RStudio) Develop comfort in navigating the tools in RStudio Develop comfort in writing and knitting a R Markdown file Identify the characteristics of tidy data Use R code: as a calculator and to explore tidy data Getting Started in RStudio As you might guess from the name, “Data Science” requires data. Working with modern (large, messy) data sets requires statistical software. We’ll exclusively use RStudio. Why? it’s free it’s open source (the code is free &amp; anybody can contribute to it) it has a huge online community (which is helpful for when you get stuck) it’s one of the industry standards it can be used to create reproducible and lovely documents (In fact, the course materials that you’re currently reading were constructed entirely within RStudio!) Download R &amp; RStudio To get started, take the following two steps in the given order. Even if you already have R/RStudio, make sure to update to the most recent versions. Download and install the R statistical software at https://mirror.las.iastate.edu/CRAN/ Download and install the FREE version of RStudio at https://www.rstudio.com/products/rstudio/download/#download What’s the difference between R and RStudio? Mainly, RStudio requires R – thus it does everything R does and more. We will be using RStudio exclusively. A quick tour of RStudio Open RStudio! You should see four panes, each serving a different purpose: Figure 1.1: RStudio Interface This short video tour of RStudio summarizes some basic features of the console. Exercise 1.1 (Warm Up) Use RStudio as a simple calculator to do the following: Perform a simple calculation: calculate 90/3. RStudio has built-in functions to which we supply the necessary arguments: function(arguments). Use the built-in function sqrt to calculate the square root of 25. Use the built-in function rep to repeat the number “5” eight times. Use the seq function to create the vector (0, 3, 6, 9, 12). (The video doesnt cover this!) Create a new vector by concatenating three repetitions of the vector from the previous part. Solution 90/3 ## [1] 30 sqrt(25) ## [1] 5 rep(5, times = 8) ## [1] 5 5 5 5 5 5 5 5 seq(0, 12, by = 3) ## [1] 0 3 6 9 12 rep(seq(0, 12, by = 3), times = 3) ## [1] 0 3 6 9 12 0 3 6 9 12 0 3 6 9 12 rep(seq(0, 12, by = 3), each = 3) #notice the difference between times and each ## [1] 0 0 0 3 3 3 6 6 6 9 9 9 12 12 12 Exercise 1.2 (Assignment) We often want to store our output for later use (why?). The basic idea in RStudio: `name &lt;- output` Copy and paste the following code into the console, line by line. NOTE: RStudio ignores any content after the #. Thus we use this to ‘comment’ and organize our code. #type square_3 square_3 #calculate 3 squared 3^2 #store this as &quot;square_3&quot; square_3 &lt;- 3^2 #type square_3 again! square_3 #do some math with square_3 square_3 + 2 Data Not only does “Data Science” require statistical software, it requires DATA! Consider the Google definition: Figure 1.2: A datum. With this definition in mind, which of the following are examples of data? tables ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 2 1 78.5 67.0 F 69.2 4 ## 3 1 78.5 67.0 F 69.0 4 ## 4 1 78.5 67.0 F 69.0 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 photo video text / tweets We’ll mostly work with data that look like this: ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 2 1 78.5 67.0 F 69.2 4 ## 3 1 78.5 67.0 F 69.0 4 ## 4 1 78.5 67.0 F 69.0 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 This isn’t as restrictive as it seems. We can convert the above signals: photos, videos, and text to a data table format! Tidy Data Example: After a scandal among FIFA officials, fivethirtyeight.com posted an analysis of FIFA viewership, “How to Break FIFA”. Here’s a snapshot of the data used in this article: country confederation population_share tv_audience_share gdp_weighted_share United States CONCACAF 4.5 4.3 11.3 Japan AFC 1.9 4.9 9.1 China AFC 19.5 14.8 7.3 Germany UEFA 1.2 2.9 6.3 Brazil CONMEBOL 2.8 7.1 5.4 United Kingdom UEFA 0.9 2.1 4.2 Italy UEFA 0.9 2.1 4.0 France UEFA 0.9 2.0 4.0 Russia UEFA 2.1 3.1 3.5 Spain UEFA 0.7 1.8 3.1 The data table above is in tidy format. Tidy data tables have three key features: Each row represents a unit of observation (also referred to as a case). Each column represents a variable (ie. an attribute of the cases that can vary from case to case). Each variable is one of two types: quantitative = numerical categorical = discrete possibilities/categories Each entry contains a single data value; no analysis, summaries, footnotes, comments, etc., and only one value per cell Exercise 1.3 (Units of Observation and Variables) Consider the following in a group: What are the units of observation in the FIFA data? What are the variables? Which are quantitative? Which are categorical? Are these tidy data? Solution A FIFA member country country name, soccer or football confederation, country’s share of global population (percentage), country’s share of global world cup TV Audience (percentage), country’s GDP-weighted audience share (percentage) Yes Exercise 1.4 (Tidy vs. Untidy) Check out the following data. Explain to each other why they are untidy and how we can tidy them. Data 1: FIFA country confederation population share tv_share United States CONCACAF i don’t know* 4.3% *look up later Japan AFC 1.9 4.9% China AFC 19.5 14.8% total=24% Data 2: Gapminder life expectancies by country country 1952 1957 1962 Asia Afghanistan 28.8 30.3 32.0 Bahrain 50.9 53.8 56.9 Africa Algeria 43.0 45.7 48.3 Solution There are notes such as “I don’t know” and “look up later” in columns with numeric values; the last row with the total is a summary. We could remove the text notes, replace it with the value if known, and remove the last row with the total summary. The first column does not have a row name. It should be continent. Additionally, Bahrain needs a value for the continent. Data Basics in RStudio For now, we’ll focus on tidy data. In a couple of weeks, you’ll learn how to turn untidy data into tidy data. Exercise 1.5 (Importing Package Data) The first step to working with data in RStudio is getting it in there! How we do this depends on its format (eg: Excel spreadsheet, csv file, txt file) and storage locations (eg: online, within Wiki, desktop). Luckily for us, the fifa_audience data are stored in the fivethirtyeight RStudio package. Copy and paste the following code into the Console and press Enter. #load the fivethirtyeight package library(fivethirtyeight) #load the fifa data data(&quot;fifa_audience&quot;) #store this under a shorter, easier name fifa &lt;- fifa_audience Exercise 1.6 (Examining Data Structures) Before we can analyze our data, we must understand its structure. Try out the following functions (copy and paste into the Console). For each, make a note that describes its action. #(what does View do?) View(fifa) #(what does head do?) head(fifa) #(what does dim do?) dim(fifa) #(what does names do?) names(fifa) Solution #View() opens up a new tab with a spread sheet preview of the data to visually explore the data. It is commented out in the Rmarkdown file because this is an interactive feature #View(fifa) #head() gives the first 6 (default number) rows of a data set head(fifa) ## # A tibble: 6 × 5 ## country confederation population_share tv_audie…¹ gdp_w…² ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 United States CONCACAF 4.5 4.3 11.3 ## 2 Japan AFC 1.9 4.9 9.1 ## 3 China AFC 19.5 14.8 7.3 ## 4 Germany UEFA 1.2 2.9 6.3 ## 5 Brazil CONMEBOL 2.8 7.1 5.4 ## 6 United Kingdom UEFA 0.9 2.1 4.2 ## # … with abbreviated variable names ¹​tv_audience_share, ## # ²​gdp_weighted_share #dim() gives the number of rows and number of columns dim(fifa) ## [1] 191 5 #names() gives the names of the columns/variables names(fifa) ## [1] &quot;country&quot; &quot;confederation&quot; &quot;population_share&quot; ## [4] &quot;tv_audience_share&quot; &quot;gdp_weighted_share&quot; Exercise 1.7 (Codebooks) Data are also only useful if we know what they measure! The fifa data table is tidy; it doesn’t have any helpful notes in the data itself. Rather, information about the data is stored in a separate codebook. Codebooks can be stored in many ways (eg: Google docs, word docs, etc). Here the authors have made their codebook available in RStudio (under the original fifa_audience name). Check it out (run the following code in the console): ?fifa_audience What does population_share measure? What are the units of population_share? Solution Country’s share of global population Percentage between 0 and 100   Exercise 1.8 (Examining a Single Variable) Consider the following: We might want to access and focus on a single variable. To this end, we can use the $ notation: fifa$tv_audience_share fifa$confederation It’s important to understand the format/class of each variable (quantitative, categorical, date, etc) in both its meaning and its structure within RStudio: class(fifa$tv_audience_share) class(fifa$confederation) If a variable is categorical (either in character or factor format), we can determine its levels / category labels: levels(fifa$confederation) levels(factor(fifa$confederation)) R Markdown and Reproducible Research Reproducible research is the idea that data analyses, and more generally, scientific claims, are published with their data and software code so that others may verify the findings and build upon them. - Reproducible Research, Coursera Useful Resources: R Markdown Quick Tour R Markdown Cheatsheet or in RStudio: Go to Help &gt; Cheat Sheets &gt; R Markdown Cheat Sheet R Markdown Reference Guide or in RStudio: Go to Help &gt; Cheat Sheets &gt; R Markdown Reference Guide Research often makes claims that are difficult to verify. A recent study of published psychology articles found that less than half of published claims could be reproduced. One of the most common reasons claims cannot be reproduced is confusion about data analysis. It may be unclear exactly how data was prepared and analyzed, or there may be a mistake in the analysis. In this course we will use an innovative format called R Markdown that dramatically increases the transparency of data analysis. R Markdown interleaves data, R code, graphs, tables, and text, packaging them into an easily publishable format. To use R Markdown, you will write an R Markdown formatted file in RStudio and then ask RStudio to knit it into an HTML document (or occasionally a PDF or MS Word document). Exercise 1.9 (Deduce the R Markdown Format) Look at this Sample RMarkdown and the HTML webpage it creates. Consider the following and discuss: How are bullets, italics, and section headers represented in the R Markdown file? How does R code appear in the R Markdown file? In the HTML webpage, do you see the R code, the output of the R code, or both? Solution Bullets are represented with * and + Italics are represented with * before and after a word or phrase Section headers are represented with # R code chunks are between 3 tick marks at the beginning and end; it is R code if there is an r in curly braces If echo=FALSE in curly braces, the code is not shown. Otherwise, both code and output are shown by default.   Now take a look at the R Markdown Cheatsheet. Look up the R Markdown features from the previous question on the cheatsheet. There’s a great deal more information there. Practice Complete the following. If you get stuck along the way, refer to the R Markdown Cheatsheet linked above, search the web for answers, and/or ask for help! Exercise 1.10 (Your First R Markdown File) Create a new R Markdown about your favorite food. Create a new file in RStudio (File -&gt; New File -&gt; R Markdown) with a Title of First_Markdown. Save it to a new folder on your Desktop called COMP_STAT_112; within that new folder, create another new folder called Day_01. Make sure you can compile/render (Knit) the Markdown into a webpage (html file). Add a new line between title and output that reads: author: Your Name. Create a brief essay about your favorite food. Make sure to include: A picture from the web A bullet list A numbered list Compile the document into an html file. Exercise 1.11 (New Data!) There’s a data set named comic_characters in the fivethirtyeightdata package. Check out the codebook (hint: use ?) to understand what these data measure. Then add a second section to your R Markdown file, and then use code chunks and R commands to perform/answer the following tasks/questions: Load the data. What are the units of observation? How many observations are there? In a new code chunk, print out the first 12 rows of the data set. Get a list of all variable names. What’s the class of the date variable? List all of the unique entries in the gsm variable (no need to include NA). Compile the document into an html file. "],["intro-to-data-visualization.html", "Topic 2 Intro to Data Visualization Learning Goals Benefits of Visualizations Glyphs Data Visualization Workflow + ggplot Additional exercises", " Topic 2 Intro to Data Visualization Learning Goals Understand the Grammar of Graphics Use ggplot2 to create basic layers of graphics Understand the different basic univariate visualizations for categorical and quantitative variables You can download a template .Rmd of this activity here or a template .qmd of this activity here. Benefits of Visualizations Visualizations help us understand what we’re working with: What are the scales of our variables? Are there any outliers, i.e. unusual cases? What are the patterns among our variables? This understanding will inform our next steps: What method of analysis / model is appropriate? Once our analysis is complete, visualizations are a powerful way to communicate our findings and tell a story. Glyphs In its original sense, in archaeology, a glyph is a carved symbol. Heiroglyph Mayan glyph Data Glyph A data glyph is also a mark, e.g.  The features of a data glyph encodes the value of variables. Some are very simple, e.g. a dot: Some combine different elements, e.g. a pointrange: Some are complicated, e.g. a dotplot: Components of Graphics Figure 2.1: Blood pressure readings from a random subset of the NHANES data set. frame: The position scale describing how data are mapped to x and y glyph: The basic graphical unit that represents one case. other terms used include mark and symbol. aesthetic: a visual property of a glyph such as position, size, shape, color, etc. may be mapped based on data values: smoker -&gt; color may be set to particular non-data related values: color is black facet: a subplot that shows one subset of the data rather than represent sex by shape, we could split into two subplots scale: A mapping that translates data values into aesthetics. example: never-&gt; pink; former-&gt; aqua; current-&gt; green guide: An indication for the human viewer of the scale. This allows the viewer to translate aesthetics back into data values. examples: x- and y-axes, various sorts of legends Eye Training for the Layered Grammar of Graphics Exercise 2.1 (Basic questions to ask of a data graphic) For your assigned graphic, discuss the following seven questions with your partner(s): What variables constitute the frame? What glyphs are used? What are the aesthetics for those glyphs? Which variable is mapped to each aesthetic? Which variable, if any, is used for faceting? Which scales are displayed with a guide? What raw data would be required for this plot, and what form should it be in? Here are the graphics examples, all taken from the New York Times website: Admissions gap Medicare hospital charges Football conferences Housing prices Baseball pitching Phillips curve School mathematics ratings Corporate taxes Glyph-Ready Data Note the mapping of data to aesthetics for Figure 2.1: sbp [Systolic Blood Pressure] -&gt; x dbp [Diastolic Blood Pressure] -&gt; y smoker -&gt; color sex -&gt; shape Glyph-ready data has this form: There is one row for each glyph to be drawn. The variables in that row are mapped to aesthetics of the glyph (including position). Table 2.1: A subset of the NHANES data set. sbp dbp sex smoker 112 55 male former 144 84 male never 143 84 female never 110 62 female never 121 72 female never 129 60 female never Data Visualization Workflow + ggplot Layers – Building up Complex Plots Using the ggplot2 package, we can create graphics by building up layers, each of which may have its own data, glyphs, aesthetic mapping, etc. As an example, let’s peel back the layers used to create Figure 2.1. The first layer just identifies the data set. It sets up a blank canvas, but does not actually plot anything: ggplot(data = Tmp) Next, we add a geometry layer to identify the mapping of data to aesthetics for each of the glyphs: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) Next, we can add some axes labels as guides: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) + xlab(&quot;Systolic BP&quot;) + ylab(&quot;Diastolic BP&quot;) And, finally, we can change the scale of the color used for smoker status: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) + xlab(&quot;Systolic BP&quot;) + ylab(&quot;Diastolic BP&quot;) + scale_color_manual(values = c(&quot;#F8766D&quot;, &quot;#00BFC4&quot;, &quot;#00BA38&quot;)) If instead we wanted to facet into columns based on smoker status, we could add another layer for that: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) + xlab(&quot;Systolic BP&quot;) + ylab(&quot;Diastolic BP&quot;) + scale_color_manual(values = c(&quot;#F8766D&quot;, &quot;#00BFC4&quot;, &quot;#00BA38&quot;)) + facet_grid(. ~ smoker) For more information on all of the different types of layers we can add to graphics, see the ggplot2 reference page and the data visualization with ggplot2 cheat sheet. Getting Started There’s no end to the number and type of visualizations you could make. Thus the process can feel overwhelming. FlowingData makes good recommendations for data viz workflow: Ask the data questions. Simple research questions will guide the types of visualizations that you should construct. Start with the basics and work incrementally. Before constructing complicated or multivariate or interactive graphics, start with simple visualizations. An understanding of the simple patterns provides a foundation upon which to build more advanced analyses and visualizations. This incremental process works particularly well with the layered grammar of graphics in ggplot. Focus. Reporting a large number of visualizations can overwhelm the audience and obscure your conclusions. Instead, pick out a focused yet comprehensive set of visualizations. Here is an example of one dataset visualized 25 different ways, each with a different focus and interpretation, and what can happen if you let the data ramble on without a focus. In this course we’ll largely construct visualizations using the ggplot function in RStudio. Though the ggplot learning curve can be steep, its “grammar” is intuitive and generalizable once mastered. The ggplot plotting function is stored in the ggplot2 package: library(ggplot2) The best way to learn about ggplot is to just play around. Focus on the patterns and potential of their application. It will be helpful to have the RStudio Data Visualization cheat sheet handy as you complete this activity. An Example The “Bechdel test”, named after cartoonist Alison Bechdel, tests whether movies meet the following criteria: There are \\(\\ge\\) 2 (named) female characters; these women talk to each other… about something other than a man. In the fivethirtyeight.com article “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women”, the authors analyze which Hollywood movies do/don’t pass the test. Their data are available in the fivethirtyeight package: library(fivethirtyeight) data(bechdel) head(bechdel) year imdb title clean_test binary budget_2013 domgross_2013 intgross_2013 2013 tt1711425 21 &amp; Over notalk FAIL 13000000 25682380 42195766 2012 tt1343727 Dredd 3D ok PASS 45658735 13611086 41467257 2013 tt2024544 12 Years a Slave notalk FAIL 20000000 53107035 158607035 2013 tt1272878 2 Guns notalk FAIL 61000000 75612460 132493015 2013 tt0453562 42 men FAIL 40000000 95020213 95020213 2013 tt1335975 47 Ronin men FAIL 225000000 38362475 145803842 Exercise 2.2 Before diving into any visualizations of these data, we first must understand its structure and contents. Discuss the following: What are the units of observation and how many units are in this sample? What are the levels of the clean_test and binary variables? Check out the codebook for bechdel (?bechdel). What’s the difference between domgross_2013 and domgross? Solution #units of observation are movies; there are 1794 movies in this sample dim(bechdel) ## [1] 1794 15 #clean_test has values of &quot;nowomen&quot;, &quot;notalk&quot;, &quot;men&quot;, &quot;dubious&quot;, &quot;ok&quot; #View(bchedel) and look at values or summarize like below table(bechdel$clean_test) ## ## nowomen notalk men dubious ok ## 141 514 194 142 803 #binary has values of PASS or FAIL table(bechdel$binary) ## ## FAIL PASS ## 991 803 # domgross_2013 is the domestic gross in US dollars but it is inflation adjusted with respect to 2013 #?bechdel Exercise 2.3 We’ll consider univariate visualizations of the clean_test and budget_2013 variables. Discuss the following: What features would we like a visualization of the categorical clean_test variable to capture? What features would we like a visualization of the quantitative budget_2013 variable to capture? Solution capture the frequency of each way a movie can fail or pass the Bechdel test capture the typical budget as well as how much variation there is across movies and if there are any outliers Categorical univariate visualization We begin by stating a clear research question: Among the movies in our sample, what fraction pass the Bechdel test? Among those that fail the test, in which way do they fail (e.g., there are no women, there are women but they only talk about men,…)? To answer the above research question, we can explore the categorical clean_test variable. A table provides a simple summary of the number of movies that fall into each clean_test category: table(bechdel$clean_test) ## ## nowomen notalk men dubious ok ## 141 514 194 142 803 Exercise 2.4 Examine the table of clean_test data, and try to interpret it. What insights does it provide about the original research question? Solution Among the categories, the “ok” category was most frequent, meaning that 803 of the 1794 movies in the sample passed the Bechdel Test. However, among those 991 movies that did not pass the test, most of them (514 of them) did not pass because the women did not talk. Because clean_test is a categorical variable, a bar chart provides an appropriate visualization of this table. In examining the bar chart, keep your eyes on the following. variability: Are cases evenly spread out among the categories or are some categories more common than others? contextual implications: In the context of your research, what do you learn from the bar chart? How would you describe your findings to a broad audience? Exercise 2.5 Try out the code below that builds up from a simple to a customized bar chart. At each step determine how each piece of code contributes to the plot. # plot 1: set up a plotting frame (a blank canvas) ggplot(bechdel, aes(x = clean_test)) # plot 2: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar() # plot 3: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar() + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 4: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar(color = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 5: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar(fill = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) Solution # plot 1: set up a plotting frame (a blank canvas) ggplot(bechdel, aes(x = clean_test)) # plot 2: Added bars that reflect the count or frequency of the movies within each category ggplot(bechdel, aes(x = clean_test)) + geom_bar() # plot 3: Added/changed the text labels for the x and y axes ggplot(bechdel, aes(x = clean_test)) + geom_bar() + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 4: Changed the outline color of the bars to purple ggplot(bechdel, aes(x = clean_test)) + geom_bar(color = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 5: Changed the fill color of the bars to purple ggplot(bechdel, aes(x = clean_test)) + geom_bar(fill = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) Exercise 2.6 Summarize the visualization: what did you learn about the distribution of the clean_test variable? Solution Among the categories, the “ok” category was most frequent. However, among those movies that did not pass the test, most of them did not pass because the women in the movie did not talk. Exercise 2.7 Let’s return to our research question: What percent of movies in the sample pass the Bechdel test? Among those that fail the test, in which way do they fail? Solution table(bechdel$binary) ## ## FAIL PASS ## 991 803 803/(991 + 803) ## [1] 0.4476031 table(bechdel$clean_test)[1:4]/991 ## ## nowomen notalk men dubious ## 0.1422805 0.5186680 0.1957619 0.1432896 Quantitative univariate visualization To motivate quantitative visualizations, consider a second research question Among the movies in our sample, what’s the range of budgets? What’s the typical budget? The largest/smallest? We can answer the above research question by exploring the quantitative budget_2013 variable. Quantitative variables require different summary tools than categorical variables. We’ll explore two methods for graphing quantitative variables: histograms and density plots. Both of these has strengths/weaknesses in helping us visualize the distribution of observed values. In their examination, keep your eyes on the following. center: Where’s the center of the distribution? What’s a typical value of the variable? variability: How spread out are the values? A lot or a little? shape: How are values distributed along the observed range? Is the distribution symmetric, right-skewed, left-skewed, bi-modal, or uniform (flat)? outliers: Are there any outliers, ie. values that are unusually large/small relative to the bulk of other values? contextual implications: Interpret these features in the context of your research. How would you describe your findings to a broad audience? Histograms Histograms are constructed by (1) dividing up the observed range of the variable into ‘bins’ of equal width; and (2) counting up the number of cases that fall into each bin. Exercise 2.8 Try out the code below. At each step determine how each piece of code contributes to the plot. # plot 1: set up a plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() # plot 3: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 4: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 5: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(fill = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 6: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 500000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 7: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 200000000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) Solution # plot 1: set up a plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: Added bars the represent the count of movies within budget intervals ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() # plot 3: Updated the text on the x and y axis labels ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 4: The outline of the bars is now white ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 5: The fill of the bars is now white ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(fill = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 6: The width of the interval or bin is decreased to $500,000 ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 500000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 7: The width of the interval or bin is increased to $200,000,000 ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 200000000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) Exercise 2.9 Summarize the visualizations. Describe the problem in choosing a bin width that’s not too wide and not too narrow, but just right. What did you learn about the distribution of the budget_2013 variable? Why does adding color = \"white\" improve the visualization? Solution If the intervals (bars, bins) are too wide, then we lose information about the variation in the budget. Take it to the extreme with just 1 bar with the bar ranging from the minimum to the maximum. If the intervals are too small, then we have the frequency of the bars go up and down quite a bit. We might say that the shape of the bars isn’t very smooth. Most of the movies have small budgets; the majority less of budgets are less than $100,000,000 (in 2013 dollars) but there are some movies with upwards of $300,000,000 (in 2013 dollars). Adding the white outline to the bars adds contrast and helps the viewer see where each bar starts and ends. Density plots Density plots are essentially smooth versions of the histogram. Instead of sorting cases into discrete bins, the “density” of cases is calculated across the entire range of values. The greater the number of cases, the greater the density! The density is then scaled so that the area under the density curve always equals 1 and the area under any fraction of the curve represents the fraction of cases that lie in that range. Exercise 2.10 Try the following code and assess what each line does. # plot 1: set up the plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density() # plot 3: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density() + labs(x = &quot;Budget ($)&quot;) # plot 4: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density(color = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;) # plot 5: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density(fill = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;) Solution # plot 1: set up the plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: add a smooth curve (shape of the histogram) ggplot(bechdel, aes(x = budget_2013)) + geom_density() # plot 3: updated the x axis label ggplot(bechdel, aes(x = budget_2013)) + geom_density() + labs(x = &quot;Budget ($)&quot;) # plot 4: changed the color of the curve to red ggplot(bechdel, aes(x = budget_2013)) + geom_density(color = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;) # plot 5: filled the area under the curve to be red ggplot(bechdel, aes(x = budget_2013)) + geom_density(fill = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;)   Exercise 2.11 The histogram and density plot both allow us to visualize the distribution of a quantitative variable. What are the pros/cons of each? Discuss. Additional exercises Exercise 2.12 In July 2016, fivethirtyeight.com published the article “Hip-Hop is Turning on Donald Trump””. You can find the supporting data table hiphop_cand_lyrics in the fivethirtyeight package: library(fivethirtyeight) data(&quot;hiphop_cand_lyrics&quot;) What are the cases in this data set? Use RStudio functions to: summarize the number of cases in hiphop_cand_lyrics examine the first cases of hiphop_cand_lyrics list out the names of all variables in hiphop_cand_lyrics Exercise 2.13 Let’s start our investigation of hip hop data by asking “Who?”; that is, let’s identify patterns in which 2016 presidential candidates popped up in hip hop lyrics. Use an RStudio function to determine the category labels used for the candidate variable. Use table to construct a table of the number of cases that fall into each candidate category. Construct a single plot that allows you to investigate the prevalence of each candidate in hip hop. Make the following modifications: - change the axis labels - change the fill colors Summarize your findings about the 2016 candidates in hip hop. Exercise 2.14 Next, consider the release dates of the hip hop songs. Construct a histogram of the release dates with the following modifications: - change the fill color of the bins - change the bin width to a meaningful size Construct a density plot of the release dates with the following modifications: - change the fill color Summarize your findings about release date Exercise 2.15 No class will teach you everything you need to know about RStudio or programming in general. Thus, being able to find help online is an important skill. To this end, make a single visualization that incorporates the following modifications to your density plot from above. This will require a little Googling and/or use of the visualization cheat sheet. Add a title or caption. Add transparency to the fill color. Calculate the mean (ie. average) release date and median release date: mean(hiphop_cand_lyrics$album_release_date) median(hiphop_cand_lyrics$album_release_date) Add two vertical lines to your plot: one representing the mean and the other representing the median. Use two different colors and/or line types. Change the limits of the x-axis to range from 1980-2020. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
